
QFrameworkApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          00001240  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001280  20001280  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 14 .debug_info   000107fd  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033be  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f50  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bda  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ef9  00000000  00000000  0003579a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013555  00000000  00000000  00056693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd14b  00000000  00000000  00069be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e14  00000000  00000000  00136d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0013ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cb4 	.word	0x08004cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08004cb4 	.word	0x08004cb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <actorA_ctor>:
QEvt * ev;
/* hierarchical state machine ... */
static QState actorA_initial(actorA_t * const me, QEvt const * const e);
static QState actorA_S00(actorA_t * const me, QEvt const * const e);

void actorA_ctor(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	actorA_t * const me = &l_actorA;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <actorA_ctor+0x3c>)
 80004cc:	607b      	str	r3, [r7, #4]
	QActive_ctor(&me->super, Q_STATE_CAST(&actorA_initial));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	490c      	ldr	r1, [pc, #48]	; (8000504 <actorA_ctor+0x40>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fc3a 	bl	8001d4c <QActive_ctor>
	QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f103 0020 	add.w	r0, r3, #32
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	2300      	movs	r3, #0
 80004e2:	2207      	movs	r2, #7
 80004e4:	f001 fcf6 	bl	8001ed4 <QTimeEvt_ctorX>
	QTimeEvt_ctorX(&me->timeEvt1, &me->super, TIMEOUT_SIG1, 0U);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	2300      	movs	r3, #0
 80004f2:	2208      	movs	r2, #8
 80004f4:	f001 fcee 	bl	8001ed4 <QTimeEvt_ctorX>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000060 	.word	0x20000060
 8000504:	08000509 	.word	0x08000509

08000508 <actorA_initial>:

QState actorA_initial(actorA_t * const me, QEvt const * const e) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
    (void)e; /* avoid compiler warning about unused parameter */

    /* arm the time event to expire in half a second and every half second */
    QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3320      	adds	r3, #32
 8000516:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800051a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fd08 	bl	8001f34 <QTimeEvt_armX>
    QTimeEvt_armX(&me->timeEvt1, BSP_TICKS_PER_SEC/500U, BSP_TICKS_PER_SEC/500U);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3334      	adds	r3, #52	; 0x34
 8000528:	2202      	movs	r2, #2
 800052a:	2102      	movs	r1, #2
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fd01 	bl	8001f34 <QTimeEvt_armX>
    me->time_sec = 0;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	649a      	str	r2, [r3, #72]	; 0x48
    me->cnt = 0;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	64da      	str	r2, [r3, #76]	; 0x4c
    return Q_TRAN(&actorA_S00);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <actorA_initial+0x48>)
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	2308      	movs	r3, #8
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08000555 	.word	0x08000555

08000554 <actorA_S00>:
uint16_t * mtrx_buff = mtrx_buffA;
uint8_t gyroscop = 0;
uint16_t middle_mtrx = 272;
static bool activate = false;

QState actorA_S00(actorA_t * const me, QEvt const * const e) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af02      	add	r7, sp, #8
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	3b01      	subs	r3, #1
 8000564:	2b0a      	cmp	r3, #10
 8000566:	f200 8181 	bhi.w	800086c <actorA_S00+0x318>
 800056a:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <actorA_S00+0x1c>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	0800059d 	.word	0x0800059d
 8000574:	0800086d 	.word	0x0800086d
 8000578:	0800086d 	.word	0x0800086d
 800057c:	0800086d 	.word	0x0800086d
 8000580:	0800086d 	.word	0x0800086d
 8000584:	0800086d 	.word	0x0800086d
 8000588:	080005af 	.word	0x080005af
 800058c:	080006a3 	.word	0x080006a3
 8000590:	08000801 	.word	0x08000801
 8000594:	08000819 	.word	0x08000819
 8000598:	080007c3 	.word	0x080007c3
        case Q_ENTRY_SIG: {
        	Digit_Number(me->cnt);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fc98 	bl	8000ed8 <Digit_Number>
            status = Q_HANDLED();
 80005a8:	2303      	movs	r3, #3
 80005aa:	77fb      	strb	r3, [r7, #31]

            // HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, SET);
            // HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, RESET);

            break;
 80005ac:	e164      	b.n	8000878 <actorA_S00+0x324>
        }
        case TIMEOUT_SIG: {
        	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005ae:	2101      	movs	r1, #1
 80005b0:	489f      	ldr	r0, [pc, #636]	; (8000830 <actorA_S00+0x2dc>)
 80005b2:	f002 fa22 	bl	80029fa <HAL_GPIO_TogglePin>

        	// MPU MPU-9250 addr 1101000 = 68 hex
        	// read X accel
        	uint8_t tx_data[8];
        	uint8_t rx_data[8];
        	tx_data[0] = '\x3b';
 80005b6:	233b      	movs	r3, #59	; 0x3b
 80005b8:	753b      	strb	r3, [r7, #20]

        	HAL_I2C_Master_Transmit(&hi2c2, 0x68 << 1, tx_data , 1, 10);
 80005ba:	f107 0214 	add.w	r2, r7, #20
 80005be:	230a      	movs	r3, #10
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	21d0      	movs	r1, #208	; 0xd0
 80005c6:	489b      	ldr	r0, [pc, #620]	; (8000834 <actorA_S00+0x2e0>)
 80005c8:	f002 fb76 	bl	8002cb8 <HAL_I2C_Master_Transmit>
        	HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, rx_data , 2, 10);
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	230a      	movs	r3, #10
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2302      	movs	r3, #2
 80005d6:	21d0      	movs	r1, #208	; 0xd0
 80005d8:	4896      	ldr	r0, [pc, #600]	; (8000834 <actorA_S00+0x2e0>)
 80005da:	f002 fc6b 	bl	8002eb4 <HAL_I2C_Master_Receive>

        	//int temperature = (rx_data[1] | (((int)rx_data[0]) << 8))/321. + 21;

        	Buzz_SetFreq(4000 + (rx_data[0] * 100));
 80005de:	7b3b      	ldrb	r3, [r7, #12]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fd63 	bl	80010b8 <Buzz_SetFreq>
        	if(activate == true && rx_data[0] > 2)
 80005f2:	4b91      	ldr	r3, [pc, #580]	; (8000838 <actorA_S00+0x2e4>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d005      	beq.n	8000606 <actorA_S00+0xb2>
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d902      	bls.n	8000606 <actorA_S00+0xb2>
        	{
        		Buzz_On();
 8000600:	f000 fd46 	bl	8001090 <Buzz_On>
 8000604:	e001      	b.n	800060a <actorA_S00+0xb6>
        	}
        	else
        	{
        		Buzz_Off();
 8000606:	f000 fd4d 	bl	80010a4 <Buzz_Off>
        	}
//////Codul facut blana
        	if(rx_data[0] > 220)
 800060a:	7b3b      	ldrb	r3, [r7, #12]
 800060c:	2bdc      	cmp	r3, #220	; 0xdc
 800060e:	d905      	bls.n	800061c <actorA_S00+0xc8>
        	{
        	  mtrx_buffA[3] = middle_mtrx << 1;
 8000610:	4b8a      	ldr	r3, [pc, #552]	; (800083c <actorA_S00+0x2e8>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b89      	ldr	r3, [pc, #548]	; (8000840 <actorA_S00+0x2ec>)
 800061a:	80da      	strh	r2, [r3, #6]
        	}
        	if(rx_data[0] < 30 )
 800061c:	7b3b      	ldrb	r3, [r7, #12]
 800061e:	2b1d      	cmp	r3, #29
 8000620:	d805      	bhi.n	800062e <actorA_S00+0xda>
        	{
        	mtrx_buffA[3] = middle_mtrx >> 1;
 8000622:	4b86      	ldr	r3, [pc, #536]	; (800083c <actorA_S00+0x2e8>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	085b      	lsrs	r3, r3, #1
 8000628:	b29a      	uxth	r2, r3
 800062a:	4b85      	ldr	r3, [pc, #532]	; (8000840 <actorA_S00+0x2ec>)
 800062c:	80da      	strh	r2, [r3, #6]
        	}
        	if(rx_data[0] > 70 && rx_data[0] < 256)
 800062e:	7b3b      	ldrb	r3, [r7, #12]
 8000630:	2b46      	cmp	r3, #70	; 0x46
 8000632:	d90b      	bls.n	800064c <actorA_S00+0xf8>
			{
				mtrx_buffA[3] = middle_mtrx << rx_data[0] / 32;
 8000634:	4b81      	ldr	r3, [pc, #516]	; (800083c <actorA_S00+0x2e8>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	7b3b      	ldrb	r3, [r7, #12]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	b2db      	uxtb	r3, r3
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b7e      	ldr	r3, [pc, #504]	; (8000840 <actorA_S00+0x2ec>)
 8000648:	80da      	strh	r2, [r3, #6]
 800064a:	e010      	b.n	800066e <actorA_S00+0x11a>
			}
        	else if(rx_data[0] < 70 && rx_data[0] > 2)
 800064c:	7b3b      	ldrb	r3, [r7, #12]
 800064e:	2b45      	cmp	r3, #69	; 0x45
 8000650:	d80d      	bhi.n	800066e <actorA_S00+0x11a>
 8000652:	7b3b      	ldrb	r3, [r7, #12]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d90a      	bls.n	800066e <actorA_S00+0x11a>
        	{
        		mtrx_buffA[3] = middle_mtrx >> rx_data[0] / 32;
 8000658:	4b78      	ldr	r3, [pc, #480]	; (800083c <actorA_S00+0x2e8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	7b3b      	ldrb	r3, [r7, #12]
 8000660:	095b      	lsrs	r3, r3, #5
 8000662:	b2db      	uxtb	r3, r3
 8000664:	fa42 f303 	asr.w	r3, r2, r3
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b75      	ldr	r3, [pc, #468]	; (8000840 <actorA_S00+0x2ec>)
 800066c:	80da      	strh	r2, [r3, #6]
        	}

        	if(rx_data[0] >= 0 || rx_data[0] <= 5 || rx_data[0] <= 255 || rx_data[0] <= 245)
        		mtrx_buffA[3] = 272;
 800066e:	4b74      	ldr	r3, [pc, #464]	; (8000840 <actorA_S00+0x2ec>)
 8000670:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000674:	80da      	strh	r2, [r3, #6]

//////
        	if(activate == true)
 8000676:	4b70      	ldr	r3, [pc, #448]	; (8000838 <actorA_S00+0x2e4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <actorA_S00+0x13c>
        	{
        		Digit_Number(rx_data[0]);
 800067e:	7b3b      	ldrb	r3, [r7, #12]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fc28 	bl	8000ed8 <Digit_Number>
        		mtrx_buff = mtrx_buffA;
 8000688:	4b6e      	ldr	r3, [pc, #440]	; (8000844 <actorA_S00+0x2f0>)
 800068a:	4a6d      	ldr	r2, [pc, #436]	; (8000840 <actorA_S00+0x2ec>)
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	e005      	b.n	800069c <actorA_S00+0x148>
        	}
        	else
        	{
        		Digit_Number(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fc21 	bl	8000ed8 <Digit_Number>
        		mtrx_buff = mtrx_buff_Off;
 8000696:	4b6b      	ldr	r3, [pc, #428]	; (8000844 <actorA_S00+0x2f0>)
 8000698:	4a6b      	ldr	r2, [pc, #428]	; (8000848 <actorA_S00+0x2f4>)
 800069a:	601a      	str	r2, [r3, #0]
        	}

        	// TBD : value 0...255 printed on digits 0 ... 99 !

            status = Q_HANDLED();
 800069c:	2303      	movs	r3, #3
 800069e:	77fb      	strb	r3, [r7, #31]
            break;
 80006a0:	e0ea      	b.n	8000878 <actorA_S00+0x324>
        }

        case TIMEOUT_SIG1: {
        	uint8_t rot = Rot_Read();
 80006a2:	f000 fd19 	bl	80010d8 <Rot_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	77bb      	strb	r3, [r7, #30]

        	static uint8_t mtrx_cntr = 0, mtrx_idx = 0;
        	static uint8_t btn_prev, btn;
        	btn = HAL_GPIO_ReadPin(ROTB_GPIO_Port, ROTB_Pin);
 80006aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ae:	4867      	ldr	r0, [pc, #412]	; (800084c <actorA_S00+0x2f8>)
 80006b0:	f002 f972 	bl	8002998 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b65      	ldr	r3, [pc, #404]	; (8000850 <actorA_S00+0x2fc>)
 80006ba:	701a      	strb	r2, [r3, #0]

        	if (btn ^ btn_prev) {
 80006bc:	4b64      	ldr	r3, [pc, #400]	; (8000850 <actorA_S00+0x2fc>)
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	4b64      	ldr	r3, [pc, #400]	; (8000854 <actorA_S00+0x300>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d010      	beq.n	80006ea <actorA_S00+0x196>
        	    ev =  Q_NEW(QEvt, ROT_BTN_SIG);
 80006c8:	220b      	movs	r2, #11
 80006ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006ce:	2004      	movs	r0, #4
 80006d0:	f001 f960 	bl	8001994 <QF_newX_>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a60      	ldr	r2, [pc, #384]	; (8000858 <actorA_S00+0x304>)
 80006d8:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 80006da:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <actorA_S00+0x304>)
 80006dc:	6819      	ldr	r1, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 ffcb 	bl	8001680 <QActive_post_>
        	}

        	btn_prev = btn;
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <actorA_S00+0x2fc>)
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	4b59      	ldr	r3, [pc, #356]	; (8000854 <actorA_S00+0x300>)
 80006f0:	701a      	strb	r2, [r3, #0]

        	if (rot == 2) {
 80006f2:	7fbb      	ldrb	r3, [r7, #30]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d111      	bne.n	800071c <actorA_S00+0x1c8>
        	    ev =  Q_NEW(QEvt, ROT_UP_SIG);
 80006f8:	2209      	movs	r2, #9
 80006fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006fe:	2004      	movs	r0, #4
 8000700:	f001 f948 	bl	8001994 <QF_newX_>
 8000704:	4603      	mov	r3, r0
 8000706:	4a54      	ldr	r2, [pc, #336]	; (8000858 <actorA_S00+0x304>)
 8000708:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 800070a:	4b53      	ldr	r3, [pc, #332]	; (8000858 <actorA_S00+0x304>)
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 ffb3 	bl	8001680 <QActive_post_>
 800071a:	e013      	b.n	8000744 <actorA_S00+0x1f0>
        	} else if (rot == 3) {
 800071c:	7fbb      	ldrb	r3, [r7, #30]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d110      	bne.n	8000744 <actorA_S00+0x1f0>
        	    ev =  Q_NEW(QEvt, ROT_DN_SIG);
 8000722:	220a      	movs	r2, #10
 8000724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000728:	2004      	movs	r0, #4
 800072a:	f001 f933 	bl	8001994 <QF_newX_>
 800072e:	4603      	mov	r3, r0
 8000730:	4a49      	ldr	r2, [pc, #292]	; (8000858 <actorA_S00+0x304>)
 8000732:	6013      	str	r3, [r2, #0]
        	    QActive_post_((QActive *)me, ev, QF_NO_MARGIN, NULL);
 8000734:	4b48      	ldr	r3, [pc, #288]	; (8000858 <actorA_S00+0x304>)
 8000736:	6819      	ldr	r1, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 ff9e 	bl	8001680 <QActive_post_>
        	}

        	mtrx_cntr ++;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <actorA_S00+0x308>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <actorA_S00+0x308>)
 800074e:	701a      	strb	r2, [r3, #0]
        	if (mtrx_cntr == 200) {
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <actorA_S00+0x308>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2bc8      	cmp	r3, #200	; 0xc8
 8000756:	d110      	bne.n	800077a <actorA_S00+0x226>
        		mtrx_cntr = 0;
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <actorA_S00+0x308>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        		mtrx_idx = 0;
 800075e:	4b40      	ldr	r3, [pc, #256]	; (8000860 <actorA_S00+0x30c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
        		if(activate == true)
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <actorA_S00+0x2e4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <actorA_S00+0x220>
        			mtrx_buff = mtrx_buffA;
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <actorA_S00+0x2f0>)
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <actorA_S00+0x2ec>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	e002      	b.n	800077a <actorA_S00+0x226>
        		else
        			mtrx_buff = mtrx_buff_Off;
 8000774:	4b33      	ldr	r3, [pc, #204]	; (8000844 <actorA_S00+0x2f0>)
 8000776:	4a34      	ldr	r2, [pc, #208]	; (8000848 <actorA_S00+0x2f4>)
 8000778:	601a      	str	r2, [r3, #0]
        	}

       		Matrix_Update(mtrx_buff[(mtrx_idx)%10]);
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <actorA_S00+0x2f0>)
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <actorA_S00+0x30c>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <actorA_S00+0x310>)
 8000784:	fba3 1302 	umull	r1, r3, r3, r2
 8000788:	08d9      	lsrs	r1, r3, #3
 800078a:	460b      	mov	r3, r1
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	440b      	add	r3, r1
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4403      	add	r3, r0
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fc23 	bl	8000fe8 <Matrix_Update>

        	mtrx_idx ++;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <actorA_S00+0x30c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <actorA_S00+0x30c>)
 80007ac:	701a      	strb	r2, [r3, #0]
        	if (mtrx_idx == 10) {
 80007ae:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <actorA_S00+0x30c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b0a      	cmp	r3, #10
 80007b4:	d102      	bne.n	80007bc <actorA_S00+0x268>
        		mtrx_idx = 0;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <actorA_S00+0x30c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
        	}


        	status = Q_HANDLED();
 80007bc:	2303      	movs	r3, #3
 80007be:	77fb      	strb	r3, [r7, #31]
            break;
 80007c0:	e05a      	b.n	8000878 <actorA_S00+0x324>
        }

        case ROT_BTN_SIG: {
        	static uint8_t x = 0;
        	//Buzz_SetFreq(4000+ (100 * accelero));
        	x++;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <actorA_S00+0x314>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <actorA_S00+0x314>)
 80007cc:	701a      	strb	r2, [r3, #0]
        	if(x % 2 == 0)
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <actorA_S00+0x314>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10e      	bne.n	80007fa <actorA_S00+0x2a6>
        		activate = !activate;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <actorA_S00+0x2e4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <actorA_S00+0x2e4>)
 80007f8:	701a      	strb	r2, [r3, #0]
        	if (x % 2) {
        		Buzz_On();
        	} else {
        		Buzz_Off();
        	}*/
            status = Q_HANDLED();
 80007fa:	2303      	movs	r3, #3
 80007fc:	77fb      	strb	r3, [r7, #31]
            break;
 80007fe:	e03b      	b.n	8000878 <actorA_S00+0x324>
        }

        case ROT_UP_SIG: {
        	if (me->cnt < 99) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	2b62      	cmp	r3, #98	; 0x62
 8000806:	dc04      	bgt.n	8000812 <actorA_S00+0x2be>
        		me->cnt++;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	64da      	str	r2, [r3, #76]	; 0x4c
        		// Digit_Number(me->cnt);

        	}
            status = Q_HANDLED();
 8000812:	2303      	movs	r3, #3
 8000814:	77fb      	strb	r3, [r7, #31]
            break;
 8000816:	e02f      	b.n	8000878 <actorA_S00+0x324>
        }

        case ROT_DN_SIG: {
        	if (me->cnt > 0) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd04      	ble.n	800082a <actorA_S00+0x2d6>
        		me->cnt--;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	64da      	str	r2, [r3, #76]	; 0x4c
        		// Digit_Number(me->cnt);

        	}
            status = Q_HANDLED();
 800082a:	2303      	movs	r3, #3
 800082c:	77fb      	strb	r3, [r7, #31]
            break;
 800082e:	e023      	b.n	8000878 <actorA_S00+0x324>
 8000830:	40020000 	.word	0x40020000
 8000834:	200000b8 	.word	0x200000b8
 8000838:	200000b0 	.word	0x200000b0
 800083c:	2000002c 	.word	0x2000002c
 8000840:	20000000 	.word	0x20000000
 8000844:	20000028 	.word	0x20000028
 8000848:	20000014 	.word	0x20000014
 800084c:	40021000 	.word	0x40021000
 8000850:	200000b1 	.word	0x200000b1
 8000854:	200000b2 	.word	0x200000b2
 8000858:	2000005c 	.word	0x2000005c
 800085c:	200000b3 	.word	0x200000b3
 8000860:	200000b4 	.word	0x200000b4
 8000864:	cccccccd 	.word	0xcccccccd
 8000868:	200000b5 	.word	0x200000b5
        }

        default: {
            status = Q_SUPER(&QHsm_top);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <actorA_S00+0x330>)
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	2300      	movs	r3, #0
 8000874:	77fb      	strb	r3, [r7, #31]
            break;
 8000876:	bf00      	nop
        }
    }
    return status;
 8000878:	7ffb      	ldrb	r3, [r7, #31]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	080011e9 	.word	0x080011e9

08000888 <QF_onStartup>:
    * To avoid problems, a dummy definition for HAL_InitTick() is provided
    * in the file stm32l5xx_hal_msp.c. The SystTick is configured and
    * started later in QF_onStartup().
    */
}
void QF_onStartup(void) {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
    /* assign all priority bits for preemption-prio. and none to sub-prio.
    * NOTE: this might have been changed by STM32Cube.
    */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <QV_onIdle>:
/*..........................................................................*/
void QF_onCleanup(void) {
}

/*..........................................................................*/
void QV_onIdle(void) { /* CATION: called with interrupts DISABLED, NOTE01 */
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
	QF_INT_ENABLE(); /* just enable interrupts */
 800089a:	2300      	movs	r3, #0
 800089c:	f383 8811 	msr	BASEPRI, r3
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <Q_onAssert>:

/*..........................................................................*/
Q_NORETURN Q_onAssert(char const * const module, int_t const loc) {
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f001 fd73 	bl	80023b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f839 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 f91d 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM4_Init();
 80008d2:	f000 f8c1 	bl	8000a58 <MX_TIM4_Init>
  MX_I2C2_Init();
 80008d6:	f000 f891 	bl	80009fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  QF_init();
 80008da:	f001 fc65 	bl	80021a8 <QF_init>
  QF_poolInit(_buff, 1024 * 4, 16);
 80008de:	2210      	movs	r2, #16
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <main+0x70>)
 80008e6:	f001 f813 	bl	8001910 <QF_poolInit>

  /* instantiate and start the active objects... */
  actorA_ctor();
 80008ea:	f7ff fdeb 	bl	80004c4 <actorA_ctor>
  QACTIVE_START(AO_actorA,      /* AO pointer to start */
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <main+0x74>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <main+0x40>
 80008f8:	216b      	movs	r1, #107	; 0x6b
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <main+0x78>)
 80008fc:	f7ff ffd5 	bl	80008aa <Q_onAssert>
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <main+0x74>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	689c      	ldr	r4, [r3, #8]
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <main+0x74>)
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	9302      	str	r3, [sp, #8]
 8000910:	2300      	movs	r3, #0
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	2300      	movs	r3, #0
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	230a      	movs	r3, #10
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <main+0x7c>)
 800091c:	2101      	movs	r1, #1
 800091e:	47a0      	blx	r4
                Q_DIM(l_blinkyQSto), /* lenght of the queue [entries] */
                (void *)0,      /* stack storage (not used in QK) */
                0U,             /* stack size [bytes] (not used in QK) */
                (QEvt *)0);     /* initial event (or 0) */

  return QF_run(); /* run the QF application */
 8000920:	f001 fc60 	bl	80021e4 <QF_run>
 8000924:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000926:	4618      	mov	r0, r3
 8000928:	3704      	adds	r7, #4
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	2000017c 	.word	0x2000017c
 8000934:	08004ccc 	.word	0x08004ccc
 8000938:	08004cd0 	.word	0x08004cd0
 800093c:	20000154 	.word	0x20000154

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f984 	bl	8004c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xb4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <SystemClock_Config+0xb4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SystemClock_Config+0xb4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <SystemClock_Config+0xb8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <SystemClock_Config+0xb8>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <SystemClock_Config+0xb8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 ffd3 	bl	800395c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009bc:	f000 f97a 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fa36 	bl	8003e4c <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009e6:	f000 f965 	bl	8000cb4 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C2_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C2_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C2_Init+0x50>)
 8000a3a:	f001 fff9 	bl	8002a30 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f936 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000b8 	.word	0x200000b8
 8000a50:	40005800 	.word	0x40005800
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <MX_TIM4_Init+0xb0>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a8e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000aa2:	f003 fb9f 	bl	80041e4 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f902 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000ac0:	f004 f850 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000aca:	f000 f8f3 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8000ad2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000ae8:	f003 fd04 	bl	80044f4 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000af2:	f000 f8df 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM4_Init+0xac>)
 8000af8:	f000 f974 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000010c 	.word	0x2000010c
 8000b08:	40000800 	.word	0x40000800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a5d      	ldr	r2, [pc, #372]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b5b      	ldr	r3, [pc, #364]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a56      	ldr	r2, [pc, #344]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b50      	ldr	r3, [pc, #320]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a41      	ldr	r2, [pc, #260]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <MX_GPIO_Init+0x194>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|MTRX_CCLK_Pin|MTRX_CS_Pin|SCK_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2139      	movs	r1, #57	; 0x39
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x198>)
 8000bb4:	f001 ff08 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x19c>)
 8000bbe:	f001 ff03 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc8:	4838      	ldr	r0, [pc, #224]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bca:	f001 fefd 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	4835      	ldr	r0, [pc, #212]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000bd6:	f001 fef7 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTRX_CRST_GPIO_Port, MTRX_CRST_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be0:	4833      	ldr	r0, [pc, #204]	; (8000cb0 <MX_GPIO_Init+0x1a4>)
 8000be2:	f001 fef1 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2120      	movs	r1, #32
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <MX_GPIO_Init+0x19c>)
 8000bec:	f001 feec 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MTRX_CCLK_Pin MTRX_CS_Pin SCK_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MTRX_CCLK_Pin|MTRX_CS_Pin|SCK_Pin;
 8000bf0:	2339      	movs	r3, #57	; 0x39
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <MX_GPIO_Init+0x198>)
 8000c08:	f001 fd2a 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : K2_Pin K3_Pin */
  GPIO_InitStruct.Pin = K2_Pin|K3_Pin;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0x19c>)
 8000c20:	f001 fd1e 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SDI_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SDI_Pin;
 8000c24:	2324      	movs	r3, #36	; 0x24
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0x19c>)
 8000c3c:	f001 fd10 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTB_Pin */
  GPIO_InitStruct.Pin = ROTB_Pin;
 8000c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROTB_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000c56:	f001 fd03 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : MTRX_LRST_Pin RST_Pin */
  GPIO_InitStruct.Pin = MTRX_LRST_Pin|RST_Pin;
 8000c5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <MX_GPIO_Init+0x1a0>)
 8000c74:	f001 fcf4 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : MTRX_CRST_Pin */
  GPIO_InitStruct.Pin = MTRX_CRST_Pin;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTRX_CRST_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_GPIO_Init+0x1a4>)
 8000c92:	f001 fce5 	bl	8002660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <HAL_I2C_MspInit+0x8c>)
 8000d6a:	f001 fc79 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40005800 	.word	0x40005800
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40021400 	.word	0x40021400

08000da0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10d      	bne.n	8000dce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_TIM_MspPostInit+0x68>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d11e      	bne.n	8000e44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_MspPostInit+0x70>)
 8000e40:	f001 fc0e 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40000800 	.word	0x40000800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	QTIMEEVT_TICK_X(0U, (void *)0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f001 f8a2 	bl	8001ff0 <QTimeEvt_tick_>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f001 fad2 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Digit_Number>:

void Digit_Init(void) {
	Digit_Update(digit_state);
}

void Digit_Number(uint16_t number) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	digit_state = ((uint16_t)digits[(number/10)%10]<<8) | digits[number % 10];
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <Digit_Number+0x70>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <Digit_Number+0x70>)
 8000ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef4:	08d9      	lsrs	r1, r3, #3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <Digit_Number+0x74>)
 8000f06:	5c9b      	ldrb	r3, [r3, r2]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b218      	sxth	r0, r3
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <Digit_Number+0x70>)
 8000f10:	fba3 1302 	umull	r1, r3, r3, r2
 8000f14:	08d9      	lsrs	r1, r3, #3
 8000f16:	460b      	mov	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <Digit_Number+0x74>)
 8000f26:	5c9b      	ldrb	r3, [r3, r2]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <Digit_Number+0x78>)
 8000f32:	801a      	strh	r2, [r3, #0]
	Digit_Update(digit_state);
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <Digit_Number+0x78>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f80b 	bl	8000f54 <Digit_Update>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	cccccccd 	.word	0xcccccccd
 8000f4c:	08004cfc 	.word	0x08004cfc
 8000f50:	2000117c 	.word	0x2000117c

08000f54 <Digit_Update>:
			break;
	}
	Digit_Update(digit_state);
}

static void Digit_Update(uint16_t data) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	uint32_t  j = 16;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]

	// negative reset pulse
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <Digit_Update+0x88>)
 8000f6a:	f001 fd2d 	bl	80029c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4819      	ldr	r0, [pc, #100]	; (8000fdc <Digit_Update+0x88>)
 8000f76:	f001 fd27 	bl	80029c8 <HAL_GPIO_WritePin>

	while (j--) { // while(data) -- BAD!!!!
 8000f7a:	e01c      	b.n	8000fb6 <Digit_Update+0x62>

		  // set data bit
		  if (data & 0x1) {
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <Digit_Update+0x3e>
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <Digit_Update+0x8c>)
 8000f8c:	f001 fd1c 	bl	80029c8 <HAL_GPIO_WritePin>
 8000f90:	e004      	b.n	8000f9c <Digit_Update+0x48>
		  } else {
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2120      	movs	r1, #32
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <Digit_Update+0x8c>)
 8000f98:	f001 fd16 	bl	80029c8 <HAL_GPIO_WritePin>
		  }

		  // clock pulse
		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <Digit_Update+0x90>)
 8000fa2:	f001 fd11 	bl	80029c8 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2120      	movs	r1, #32
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <Digit_Update+0x90>)
 8000fac:	f001 fd0c 	bl	80029c8 <HAL_GPIO_WritePin>

		  data >>= 1;
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	80fb      	strh	r3, [r7, #6]
	while (j--) { // while(data) -- BAD!!!!
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	60fa      	str	r2, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1dd      	bne.n	8000f7c <Digit_Update+0x28>
	}

	// positive update (write) pulse
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <Digit_Update+0x8c>)
 8000fc6:	f001 fcff 	bl	80029c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <Digit_Update+0x8c>)
 8000fd0:	f001 fcfa 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Matrix_Update>:

void Matrix_Update(uint16_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	uint32_t  j = 16;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(MTRX_CCLK_GPIO_Port, MTRX_CCLK_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <Matrix_Update+0x9c>)
 8000ffc:	f001 fce4 	bl	80029c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_CCLK_GPIO_Port, MTRX_CCLK_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2108      	movs	r1, #8
 8001004:	481f      	ldr	r0, [pc, #124]	; (8001084 <Matrix_Update+0x9c>)
 8001006:	f001 fcdf 	bl	80029c8 <HAL_GPIO_WritePin>

	// negative reset pulse
	HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <Matrix_Update+0xa0>)
 8001012:	f001 fcd9 	bl	80029c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_LRST_GPIO_Port, MTRX_LRST_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <Matrix_Update+0xa0>)
 800101e:	f001 fcd3 	bl	80029c8 <HAL_GPIO_WritePin>

	while (j--) { // while(data) -- BAD!!!!
 8001022:	e01b      	b.n	800105c <Matrix_Update+0x74>

		  // set data bit
		  if (data & 0x8000) {
 8001024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001028:	2b00      	cmp	r3, #0
 800102a:	da05      	bge.n	8001038 <Matrix_Update+0x50>
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2120      	movs	r1, #32
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <Matrix_Update+0xa4>)
 8001032:	f001 fcc9 	bl	80029c8 <HAL_GPIO_WritePin>
 8001036:	e004      	b.n	8001042 <Matrix_Update+0x5a>
		  } else {
			  HAL_GPIO_WritePin(SDI_GPIO_Port, SDI_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2120      	movs	r1, #32
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <Matrix_Update+0xa4>)
 800103e:	f001 fcc3 	bl	80029c8 <HAL_GPIO_WritePin>
		  }

		  // clock pulse
		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2120      	movs	r1, #32
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <Matrix_Update+0x9c>)
 8001048:	f001 fcbe 	bl	80029c8 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <Matrix_Update+0x9c>)
 8001052:	f001 fcb9 	bl	80029c8 <HAL_GPIO_WritePin>

		  data <<= 1;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	80fb      	strh	r3, [r7, #6]
	while (j--) { // while(data) -- BAD!!!!
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	60fa      	str	r2, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1de      	bne.n	8001024 <Matrix_Update+0x3c>
	}

	// positive update (write) pulse
	HAL_GPIO_WritePin(MTRX_CS_GPIO_Port, MTRX_CS_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <Matrix_Update+0x9c>)
 800106c:	f001 fcac 	bl	80029c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTRX_CS_GPIO_Port, MTRX_CS_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <Matrix_Update+0x9c>)
 8001076:	f001 fca7 	bl	80029c8 <HAL_GPIO_WritePin>


}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020000 	.word	0x40020000
 8001088:	40021000 	.word	0x40021000
 800108c:	40020400 	.word	0x40020400

08001090 <Buzz_On>:

void Buzz_On(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001094:	2108      	movs	r1, #8
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <Buzz_On+0x10>)
 8001098:	f003 f8f4 	bl	8004284 <HAL_TIM_PWM_Start>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000010c 	.word	0x2000010c

080010a4 <Buzz_Off>:

void Buzz_Off(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80010a8:	2108      	movs	r1, #8
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <Buzz_Off+0x10>)
 80010ac:	f003 f9b2 	bl	8004414 <HAL_TIM_PWM_Stop>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000010c 	.word	0x2000010c

080010b8 <Buzz_SetFreq>:

void Buzz_SetFreq(uint32_t freq) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	TIM4->ARR = freq;
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <Buzz_SetFreq+0x1c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40000800 	.word	0x40000800

080010d8 <Rot_Read>:

uint8_t Rot_Read(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

	uint8_t ret = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]

	timer_enc++;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <Rot_Read+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <Rot_Read+0xc0>)
 80010ea:	6013      	str	r3, [r2, #0]

	static uint8_t key2 = 1, key3 = 1, key2_prev = 1, key3_prev = 1;

	key2 = HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin);
 80010ec:	2101      	movs	r1, #1
 80010ee:	482b      	ldr	r0, [pc, #172]	; (800119c <Rot_Read+0xc4>)
 80010f0:	f001 fc52 	bl	8002998 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <Rot_Read+0xc8>)
 80010fa:	701a      	strb	r2, [r3, #0]
	key3 = HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin);
 80010fc:	2102      	movs	r1, #2
 80010fe:	4827      	ldr	r0, [pc, #156]	; (800119c <Rot_Read+0xc4>)
 8001100:	f001 fc4a 	bl	8002998 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <Rot_Read+0xcc>)
 800110a:	701a      	strb	r2, [r3, #0]

	if(key2 ^ key2_prev) {
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <Rot_Read+0xc8>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <Rot_Read+0xd0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d004      	beq.n	8001122 <Rot_Read+0x4a>
		timer_key2 = timer_enc;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <Rot_Read+0xc0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <Rot_Read+0xd4>)
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e009      	b.n	8001136 <Rot_Read+0x5e>
	} else if(key3 ^ key3_prev) {
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <Rot_Read+0xcc>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <Rot_Read+0xd8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d003      	beq.n	8001136 <Rot_Read+0x5e>
		timer_key3 = timer_enc;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <Rot_Read+0xc0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <Rot_Read+0xdc>)
 8001134:	6013      	str	r3, [r2, #0]
	}

	key2_prev = key2;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <Rot_Read+0xc8>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <Rot_Read+0xd0>)
 800113c:	701a      	strb	r2, [r3, #0]
	key3_prev = key3;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <Rot_Read+0xcc>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <Rot_Read+0xd8>)
 8001144:	701a      	strb	r2, [r3, #0]

	if (timer_key2 != 0 && abs(timer_key3 - timer_key2) < 11) {
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <Rot_Read+0xd4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Rot_Read+0xb6>
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <Rot_Read+0xdc>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <Rot_Read+0xd4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f113 0f0a 	cmn.w	r3, #10
 800115c:	db17      	blt.n	800118e <Rot_Read+0xb6>
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <Rot_Read+0xdc>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <Rot_Read+0xd4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b0a      	cmp	r3, #10
 800116a:	dc10      	bgt.n	800118e <Rot_Read+0xb6>
		// e.sig = (timer_key3 > timer_key2) + ROT_UP_SIG;

		if (timer_key3 > timer_key2) {
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <Rot_Read+0xdc>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <Rot_Read+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d902      	bls.n	800117e <Rot_Read+0xa6>
			// e.sig = ROT_UP_SIG;
			ret = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	e001      	b.n	8001182 <Rot_Read+0xaa>
		} else {
			// e.sig = ROT_DN_SIG;
			ret = 3;
 800117e:	2303      	movs	r3, #3
 8001180:	71fb      	strb	r3, [r7, #7]
		}

		timer_key2 = 0;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <Rot_Read+0xd4>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		timer_key3 = 0;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <Rot_Read+0xdc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
	}

	return ret;
 800118e:	79fb      	ldrb	r3, [r7, #7]

}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20001188 	.word	0x20001188
 800119c:	40020400 	.word	0x40020400
 80011a0:	20000034 	.word	0x20000034
 80011a4:	20000035 	.word	0x20000035
 80011a8:	20000036 	.word	0x20000036
 80011ac:	20001180 	.word	0x20001180
 80011b0:	20000037 	.word	0x20000037
 80011b4:	20001184 	.word	0x20001184

080011b8 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <QHsm_ctor+0x28>)
 80011c6:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <QHsm_ctor+0x2c>)
 80011cc:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	08004d20 	.word	0x08004d20
 80011e4:	080011e9 	.word	0x080011e9

080011e8 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 80011f2:	2304      	movs	r3, #4
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <QHsm_init_+0x2a>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <QHsm_init_+0x2a>
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <QHsm_init_+0xf4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d003      	beq.n	8001232 <QHsm_init_+0x32>
 800122a:	21c8      	movs	r1, #200	; 0xc8
 800122c:	4832      	ldr	r0, [pc, #200]	; (80012f8 <QHsm_init_+0xf8>)
 800122e:	f7ff fb3c 	bl	80008aa <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	4798      	blx	r3
 800123c:	4603      	mov	r3, r0
 800123e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001246:	2b08      	cmp	r3, #8
 8001248:	d003      	beq.n	8001252 <QHsm_init_+0x52>
 800124a:	21d2      	movs	r1, #210	; 0xd2
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <QHsm_init_+0xf8>)
 800124e:	f7ff fb2c 	bl	80008aa <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4926      	ldr	r1, [pc, #152]	; (80012fc <QHsm_init_+0xfc>)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	4798      	blx	r3
        while (me->temp.fun != t) {
 8001266:	e016      	b.n	8001296 <QHsm_init_+0x96>
            ++ip;
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	3301      	adds	r3, #1
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	2b05      	cmp	r3, #5
 8001272:	dd03      	ble.n	800127c <QHsm_init_+0x7c>
 8001274:	21dc      	movs	r1, #220	; 0xdc
 8001276:	4820      	ldr	r0, [pc, #128]	; (80012f8 <QHsm_init_+0xf8>)
 8001278:	f7ff fb17 	bl	80008aa <Q_onAssert>
            path[ip] = me->temp.fun;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	3338      	adds	r3, #56	; 0x38
 8001286:	443b      	add	r3, r7
 8001288:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	491a      	ldr	r1, [pc, #104]	; (80012fc <QHsm_init_+0xfc>)
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	4798      	blx	r3
        while (me->temp.fun != t) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129c:	429a      	cmp	r2, r3
 800129e:	d1e3      	bne.n	8001268 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	3338      	adds	r3, #56	; 0x38
 80012ac:	443b      	add	r3, r7
 80012ae:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012b2:	4913      	ldr	r1, [pc, #76]	; (8001300 <QHsm_init_+0x100>)
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	4798      	blx	r3
            --ip;
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	3b01      	subs	r3, #1
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	daf0      	bge.n	80012a6 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 80012c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <QHsm_init_+0x104>)
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	4798      	blx	r3
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d0b9      	beq.n	8001252 <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e2:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e8:	609a      	str	r2, [r3, #8]
}
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	; 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	080011e9 	.word	0x080011e9
 80012f8:	08004d08 	.word	0x08004d08
 80012fc:	08004d10 	.word	0x08004d10
 8001300:	08004d14 	.word	0x08004d14
 8001304:	08004d1c 	.word	0x08004d1c

08001308 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <QHsm_dispatch_+0x22>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001326:	429a      	cmp	r2, r3
 8001328:	d004      	beq.n	8001334 <QHsm_dispatch_+0x2c>
 800132a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800132e:	4852      	ldr	r0, [pc, #328]	; (8001478 <QHsm_dispatch_+0x170>)
 8001330:	f7ff fabb 	bl	80008aa <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	4798      	blx	r3
 8001342:	4603      	mov	r3, r0
 8001344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8001348:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800134c:	2b02      	cmp	r3, #2
 800134e:	d106      	bne.n	800135e <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	494a      	ldr	r1, [pc, #296]	; (800147c <QHsm_dispatch_+0x174>)
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	4798      	blx	r3
 8001358:	4603      	mov	r3, r0
 800135a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 800135e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0e6      	beq.n	8001334 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8001366:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800136a:	2b07      	cmp	r3, #7
 800136c:	d97a      	bls.n	8001464 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8001374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001376:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 800137c:	e00d      	b.n	800139a <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800137e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001380:	493f      	ldr	r1, [pc, #252]	; (8001480 <QHsm_dispatch_+0x178>)
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	2b03      	cmp	r3, #3
 800138a:	d103      	bne.n	8001394 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	493b      	ldr	r1, [pc, #236]	; (800147c <QHsm_dispatch_+0x174>)
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
 800139a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	429a      	cmp	r2, r3
 80013a0:	d1ed      	bne.n	800137e <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4619      	mov	r1, r3
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f86e 	bl	800148c <QHsm_tran_>
 80013b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 80013b2:	e00b      	b.n	80013cc <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	3338      	adds	r3, #56	; 0x38
 80013ba:	443b      	add	r3, r7
 80013bc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013c0:	4930      	ldr	r1, [pc, #192]	; (8001484 <QHsm_dispatch_+0x17c>)
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3b01      	subs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	daf0      	bge.n	80013b4 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013da:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80013dc:	e03b      	b.n	8001456 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4923      	ldr	r1, [pc, #140]	; (800147c <QHsm_dispatch_+0x174>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	4798      	blx	r3

            while (me->temp.fun != t) {
 80013f2:	e00f      	b.n	8001414 <QHsm_dispatch_+0x10c>
                ++ip;
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	3301      	adds	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	3338      	adds	r3, #56	; 0x38
 8001404:	443b      	add	r3, r7
 8001406:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	491b      	ldr	r1, [pc, #108]	; (800147c <QHsm_dispatch_+0x174>)
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	4798      	blx	r3
            while (me->temp.fun != t) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800141a:	429a      	cmp	r2, r3
 800141c:	d1ea      	bne.n	80013f4 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	2b05      	cmp	r3, #5
 8001428:	dd04      	ble.n	8001434 <QHsm_dispatch_+0x12c>
 800142a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800142e:	4812      	ldr	r0, [pc, #72]	; (8001478 <QHsm_dispatch_+0x170>)
 8001430:	f7ff fa3b 	bl	80008aa <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8001434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	3338      	adds	r3, #56	; 0x38
 800143a:	443b      	add	r3, r7
 800143c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001440:	4910      	ldr	r1, [pc, #64]	; (8001484 <QHsm_dispatch_+0x17c>)
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	4798      	blx	r3
                --ip;
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	3b01      	subs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	daf0      	bge.n	8001434 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	490b      	ldr	r1, [pc, #44]	; (8001488 <QHsm_dispatch_+0x180>)
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	4798      	blx	r3
 800145e:	4603      	mov	r3, r0
 8001460:	2b08      	cmp	r3, #8
 8001462:	d0bc      	beq.n	80013de <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001468:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	3738      	adds	r7, #56	; 0x38
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08004d08 	.word	0x08004d08
 800147c:	08004d10 	.word	0x08004d10
 8001480:	08004d18 	.word	0x08004d18
 8001484:	08004d14 	.word	0x08004d14
 8001488:	08004d1c 	.word	0x08004d1c

0800148c <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d106      	bne.n	80014c0 <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	4964      	ldr	r1, [pc, #400]	; (8001648 <QHsm_tran_+0x1bc>)
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	4798      	blx	r3
        ip = 0; /* enter the target */
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
 80014be:	e0be      	b.n	800163e <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	4962      	ldr	r1, [pc, #392]	; (800164c <QHsm_tran_+0x1c0>)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	4798      	blx	r3

        t = me->temp.fun;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d102      	bne.n	80014dc <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	e0b0      	b.n	800163e <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	495b      	ldr	r1, [pc, #364]	; (800164c <QHsm_tran_+0x1c0>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d106      	bne.n	80014fc <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4955      	ldr	r1, [pc, #340]	; (8001648 <QHsm_tran_+0x1bc>)
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	4798      	blx	r3
                ip = 0; /* enter the target */
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	e0a0      	b.n	800163e <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d104      	bne.n	8001512 <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	494f      	ldr	r1, [pc, #316]	; (8001648 <QHsm_tran_+0x1bc>)
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	4798      	blx	r3
 8001510:	e095      	b.n	800163e <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8001516:	2301      	movs	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3304      	adds	r3, #4
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3304      	adds	r3, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4947      	ldr	r1, [pc, #284]	; (800164c <QHsm_tran_+0x1c0>)
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	4798      	blx	r3
 8001534:	4603      	mov	r3, r0
 8001536:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001538:	e025      	b.n	8001586 <QHsm_tran_+0xfa>
                        ++ip;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	4413      	add	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6892      	ldr	r2, [r2, #8]
 800154c:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	d10f      	bne.n	8001578 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	2b05      	cmp	r3, #5
 8001560:	dd04      	ble.n	800156c <QHsm_tran_+0xe0>
 8001562:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001566:	483a      	ldr	r0, [pc, #232]	; (8001650 <QHsm_tran_+0x1c4>)
 8001568:	f7ff f99f 	bl	80008aa <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3b01      	subs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8001572:	2303      	movs	r3, #3
 8001574:	76fb      	strb	r3, [r7, #27]
 8001576:	e006      	b.n	8001586 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4933      	ldr	r1, [pc, #204]	; (800164c <QHsm_tran_+0x1c0>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	4798      	blx	r3
 8001582:	4603      	mov	r3, r0
 8001584:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0d6      	beq.n	800153a <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d155      	bne.n	800163e <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	2b05      	cmp	r3, #5
 8001596:	dd04      	ble.n	80015a2 <QHsm_tran_+0x116>
 8001598:	f44f 7102 	mov.w	r1, #520	; 0x208
 800159c:	482c      	ldr	r0, [pc, #176]	; (8001650 <QHsm_tran_+0x1c4>)
 800159e:	f7ff f984 	bl	80008aa <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4928      	ldr	r1, [pc, #160]	; (8001648 <QHsm_tran_+0x1bc>)
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 80015ae:	2304      	movs	r3, #4
 80015b0:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a3a      	ldr	r2, [r7, #32]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d108      	bne.n	80015d4 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 80015c2:	2303      	movs	r3, #3
 80015c4:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e002      	b.n	80015da <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dae8      	bge.n	80015b2 <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 80015e0:	7efb      	ldrb	r3, [r7, #27]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d02b      	beq.n	800163e <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 80015e6:	2304      	movs	r3, #4
 80015e8:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <QHsm_tran_+0x1bc>)
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	4798      	blx	r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d103      	bne.n	8001600 <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	4914      	ldr	r1, [pc, #80]	; (800164c <QHsm_tran_+0x1c0>)
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	429a      	cmp	r2, r3
 8001618:	d108      	bne.n	800162c <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b01      	subs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8001626:	2303      	movs	r3, #3
 8001628:	76fb      	strb	r3, [r7, #27]
 800162a:	e002      	b.n	8001632 <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3b01      	subs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dae8      	bge.n	800160a <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8001638:	7efb      	ldrb	r3, [r7, #27]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d1d5      	bne.n	80015ea <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001640:	4618      	mov	r0, r3
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08004d18 	.word	0x08004d18
 800164c:	08004d10 	.word	0x08004d10
 8001650:	08004d08 	.word	0x08004d08

08001654 <QPSet_insert>:
}

/*! insert element `n` into the set (n = 1..::QF_MAX_ACTIVE) */
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits | (1U << (n - 1U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
        }
        else {
            me->bits[1] = (me->bits[1] | ((uint32_t)1U << (n - 33U)));
        }
    #endif
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <QActive_post_>:
/*${QF::QActive::post_} ....................................................*/
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    /*! @pre event pointer must be valid */
    Q_REQUIRE_ID(100, e != (QEvt *)0);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <QActive_post_+0x1c>
 8001694:	2164      	movs	r1, #100	; 0x64
 8001696:	483d      	ldr	r0, [pc, #244]	; (800178c <QActive_post_+0x10c>)
 8001698:	f7ff f907 	bl	80008aa <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800169c:	233f      	movs	r3, #63	; 0x3f
 800169e:	b672      	cpsid	i
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	7ddb      	ldrb	r3, [r3, #23]
 80016aa:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10e      	bne.n	80016d4 <QActive_post_+0x54>
        if (nFree > 0U) {
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <QActive_post_+0x42>
            status = true; /* can post */
 80016bc:	2301      	movs	r3, #1
 80016be:	75fb      	strb	r3, [r7, #23]
 80016c0:	e012      	b.n	80016e8 <QActive_post_+0x68>
        }
        else {
            status = false; /* cannot post */
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(110); /* must be able to post the event */
 80016c6:	2300      	movs	r3, #0
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	216e      	movs	r1, #110	; 0x6e
 80016ce:	482f      	ldr	r0, [pc, #188]	; (800178c <QActive_post_+0x10c>)
 80016d0:	f7ff f8eb 	bl	80008aa <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	7dba      	ldrb	r2, [r7, #22]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d902      	bls.n	80016e4 <QActive_post_+0x64>
        status = true; /* can post */
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
 80016e2:	e001      	b.n	80016e8 <QActive_post_+0x68>
    }
    else {
        status = false; /* cannot post, but don't assert */
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	789b      	ldrb	r3, [r3, #2]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <QActive_post_+0x7e>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	78db      	ldrb	r3, [r3, #3]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	70da      	strb	r2, [r3, #3]
    }

    if (status) { /* can post the event? */
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d038      	beq.n	8001776 <QActive_post_+0xf6>

        --nFree; /* one free entry just used up */
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	3b01      	subs	r3, #1
 8001708:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the volatile */
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	7dba      	ldrb	r2, [r7, #22]
 800170e:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
 8001714:	7dba      	ldrb	r2, [r7, #22]
 8001716:	429a      	cmp	r2, r3
 8001718:	d202      	bcs.n	8001720 <QActive_post_+0xa0>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	7dba      	ldrb	r2, [r7, #22]
 800171e:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <QActive_post_+0xbc>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	7f1b      	ldrb	r3, [r3, #28]
 8001732:	4619      	mov	r1, r3
 8001734:	4816      	ldr	r0, [pc, #88]	; (8001790 <QActive_post_+0x110>)
 8001736:	f7ff ff8d 	bl	8001654 <QPSet_insert>
 800173a:	e018      	b.n	800176e <QActive_post_+0xee>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            me->eQueue.ring[me->eQueue.head] = e;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	7d5b      	ldrb	r3, [r3, #21]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	7d5b      	ldrb	r3, [r3, #21]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <QActive_post_+0xe0>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	7d1a      	ldrb	r2, [r3, #20]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	7d5b      	ldrb	r3, [r3, #21]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 800176e:	2300      	movs	r3, #0
 8001770:	f383 8811 	msr	BASEPRI, r3
 8001774:	e005      	b.n	8001782 <QActive_post_+0x102>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_CRIT_X_();
 8001776:	2300      	movs	r3, #0
 8001778:	f383 8811 	msr	BASEPRI, r3

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); /* recycle the event to avoid a leak */
 800177c:	68b8      	ldr	r0, [r7, #8]
 800177e:	f000 f96d 	bl	8001a5c <QF_gc>
    #endif
    }

    return status;
 8001782:	7dfb      	ldrb	r3, [r7, #23]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	08004d28 	.word	0x08004d28
 8001790:	20001250 	.word	0x20001250

08001794 <QActive_postLIFO_>:
/*$define${QF::QActive::postLIFO_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::postLIFO_} ................................................*/
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800179e:	233f      	movs	r3, #63	; 0x3f
 80017a0:	b672      	cpsid	i
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into the temporary */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7ddb      	ldrb	r3, [r3, #23]
 80017ac:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT_CRIT_(210, nFree != 0U);
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <QActive_postLIFO_+0x2e>
 80017b4:	2300      	movs	r3, #0
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	21d2      	movs	r1, #210	; 0xd2
 80017bc:	4826      	ldr	r0, [pc, #152]	; (8001858 <QActive_postLIFO_+0xc4>)
 80017be:	f7ff f874 	bl	80008aa <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <QActive_postLIFO_+0x44>
        QF_EVT_REF_CTR_INC_(e); /* increment the reference counter */
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	78db      	ldrb	r3, [r3, #3]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	70da      	strb	r2, [r3, #3]
    }

    --nFree; /* one free entry just used up */
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	3b01      	subs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the volatile */
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d202      	bcs.n	80017f4 <QActive_postLIFO_+0x60>
        me->eQueue.nMin = nFree; /* update minimum so far */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	761a      	strb	r2, [r3, #24]
            QS_onTestPost((QActive *)0, me, e, true);
        }
    #endif

    /* temporary to avoid UB for volatile access */
    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <QActive_postLIFO_+0x80>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7f1b      	ldrb	r3, [r3, #28]
 800180a:	4619      	mov	r1, r3
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <QActive_postLIFO_+0xc8>)
 800180e:	f7ff ff21 	bl	8001654 <QPSet_insert>
 8001812:	e019      	b.n	8001848 <QActive_postLIFO_+0xb4>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7d9b      	ldrb	r3, [r3, #22]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7d9b      	ldrb	r3, [r3, #22]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7d1b      	ldrb	r3, [r3, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	d102      	bne.n	8001836 <QActive_postLIFO_+0xa2>
            me->eQueue.tail = 0U; /* wrap around */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	759a      	strb	r2, [r3, #22]
        }

        me->eQueue.ring[me->eQueue.tail] = frontEvt;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7d9b      	ldrb	r3, [r3, #22]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8001848:	2300      	movs	r3, #0
 800184a:	f383 8811 	msr	BASEPRI, r3
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	08004d28 	.word	0x08004d28
 800185c:	20001250 	.word	0x20001250

08001860 <QActive_get_>:
/*$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::get_} .....................................................*/
QEvt const * QActive_get_(QActive * const me) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001868:	233f      	movs	r3, #63	; 0x3f
 800186a:	b672      	cpsid	i
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <QActive_get_+0x22>
 800187a:	2100      	movs	r1, #0
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <QActive_get_+0xac>)
 800187e:	f7ff f814 	bl	80008aa <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* volatile into tmp */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7ddb      	ldrb	r3, [r3, #23]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3301      	adds	r3, #1
 8001890:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7afa      	ldrb	r2, [r7, #11]
 8001896:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7d1b      	ldrb	r3, [r3, #20]
 800189c:	7afa      	ldrb	r2, [r7, #11]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d81a      	bhi.n	80018d8 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7d9b      	ldrb	r3, [r3, #22]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7d9b      	ldrb	r3, [r3, #22]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7d1a      	ldrb	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7d9b      	ldrb	r3, [r3, #22]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	759a      	strb	r2, [r3, #22]
 80018d6:	e010      	b.n	80018fa <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 80018de:	7afa      	ldrb	r2, [r7, #11]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7d1b      	ldrb	r3, [r3, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d007      	beq.n	80018fa <QActive_get_+0x9a>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f383 8811 	msr	BASEPRI, r3
 80018f0:	f44f 719b 	mov.w	r1, #310	; 0x136
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <QActive_get_+0xac>)
 80018f6:	f7fe ffd8 	bl	80008aa <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80018fa:	2300      	movs	r3, #0
 80018fc:	f383 8811 	msr	BASEPRI, r3
    return e;
 8001900:	68fb      	ldr	r3, [r7, #12]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08004d28 	.word	0x08004d28

08001910 <QF_poolInit>:
/*${QF::QF-dyn::poolInit} ..................................................*/
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <QF_poolInit+0x78>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d903      	bls.n	800192c <QF_poolInit+0x1c>
 8001924:	21c8      	movs	r1, #200	; 0xc8
 8001926:	4819      	ldr	r0, [pc, #100]	; (800198c <QF_poolInit+0x7c>)
 8001928:	f7fe ffbf 	bl	80008aa <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <QF_poolInit+0x78>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d012      	beq.n	800195a <QF_poolInit+0x4a>
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <QF_poolInit+0x78>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	4915      	ldr	r1, [pc, #84]	; (8001990 <QF_poolInit+0x80>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	330c      	adds	r3, #12
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4293      	cmp	r3, r2
 8001950:	d803      	bhi.n	800195a <QF_poolInit+0x4a>
 8001952:	21c9      	movs	r1, #201	; 0xc9
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <QF_poolInit+0x7c>)
 8001956:	f7fe ffa8 	bl	80008aa <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_ePool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_ePool_[QF_maxPool_], poolSto, poolSize, evtSize);
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <QF_poolInit+0x78>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <QF_poolInit+0x80>)
 8001968:	1898      	adds	r0, r3, r2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	68f9      	ldr	r1, [r7, #12]
 8001970:	f000 f8b8 	bl	8001ae4 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <QF_poolInit+0x78>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a03      	ldr	r2, [pc, #12]	; (8001988 <QF_poolInit+0x78>)
 800197c:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_ePool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
    #endif /* Q_SPY*/
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000118c 	.word	0x2000118c
 800198c:	08004d30 	.word	0x08004d30
 8001990:	20001190 	.word	0x20001190

08001994 <QF_newX_>:
/*${QF::QF-dyn::newX_} .....................................................*/
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
    uint_fast8_t idx;

    /* find the pool index that fits the requested event size ... */
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00f      	b.n	80019c6 <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_ePool_[idx])) {
 80019a6:	492a      	ldr	r1, [pc, #168]	; (8001a50 <QF_newX_+0xbc>)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	330c      	adds	r3, #12
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4293      	cmp	r3, r2
 80019be:	d908      	bls.n	80019d2 <QF_newX_+0x3e>
    for (idx = 0U; idx < QF_maxPool_; ++idx) {
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <QF_newX_+0xc0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d3ea      	bcc.n	80019a6 <QF_newX_+0x12>
 80019d0:	e000      	b.n	80019d4 <QF_newX_+0x40>
            break;
 80019d2:	bf00      	nop
        }
    }
    /* cannot run out of registered pools */
    Q_ASSERT_ID(310, idx < QF_maxPool_);
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <QF_newX_+0xc0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d304      	bcc.n	80019e8 <QF_newX_+0x54>
 80019de:	f44f 719b 	mov.w	r1, #310	; 0x136
 80019e2:	481d      	ldr	r0, [pc, #116]	; (8001a58 <QF_newX_+0xc4>)
 80019e4:	f7fe ff61 	bl	80008aa <Q_onAssert>
    #ifdef Q_SPY
    QF_EPOOL_GET_(QF_ePool_[idx], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + idx + 1U);
    #else
    QF_EPOOL_GET_(QF_ePool_[idx], e,
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <QF_newX_+0xbc>)
 80019f4:	1898      	adds	r0, r3, r2
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d001      	beq.n	8001a04 <QF_newX_+0x70>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	e000      	b.n	8001a06 <QF_newX_+0x72>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f000 f8dd 	bl	8001bc8 <QMPool_get>
 8001a0e:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
    #endif

    /* was e allocated correctly? */
    QS_CRIT_STAT_
    if (e != (QEvt *)0) {
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <QF_newX_+0x9e>
        e->sig = (QSignal)sig;     /* set signal for this event */
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	801a      	strh	r2, [r3, #0]
        e->poolId_ = (uint8_t)(idx + 1U); /* store the pool ID */
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	709a      	strb	r2, [r3, #2]
        e->refCtr_ = 0U; /* set the reference counter to 0 */
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	70da      	strb	r2, [r3, #3]
 8001a30:	e009      	b.n	8001a46 <QF_newX_+0xb2>
    else {
        /* This assertion means that the event allocation failed,
         * and this failure cannot be tolerated. The most frequent
         * reason is an event leak in the application.
         */
        Q_ASSERT_ID(320, margin != QF_NO_MARGIN);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d104      	bne.n	8001a46 <QF_newX_+0xb2>
 8001a3c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <QF_newX_+0xc4>)
 8001a42:	f7fe ff32 	bl	80008aa <Q_onAssert>
            QS_TIME_PRE_();        /* timestamp */
            QS_EVS_PRE_(evtSize);  /* the size of the event */
            QS_SIG_PRE_(sig);      /* the signal of the event */
        QS_END_PRE_()
    }
    return e; /* can't be NULL if we can't tolerate failed allocation */
 8001a46:	693b      	ldr	r3, [r7, #16]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20001190 	.word	0x20001190
 8001a54:	2000118c 	.word	0x2000118c
 8001a58:	08004d30 	.word	0x08004d30

08001a5c <QF_gc>:

/*${QF::QF-dyn::gc} ........................................................*/
void QF_gc(QEvt const * const e) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	789b      	ldrb	r3, [r3, #2]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d031      	beq.n	8001ad0 <QF_gc+0x74>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8001a6c:	233f      	movs	r3, #63	; 0x3f
 8001a6e:	b672      	cpsid	i
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	78db      	ldrb	r3, [r3, #3]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d90a      	bls.n	8001a96 <QF_gc+0x3a>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QF_EVT_REF_CTR_DEC_(e); /* decrement the ref counter */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	70da      	strb	r2, [r3, #3]

            QF_CRIT_X_();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f383 8811 	msr	BASEPRI, r3
    #else
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
    #endif
        }
    }
}
 8001a94:	e01c      	b.n	8001ad0 <QF_gc+0x74>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <QF_gc+0x7c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d304      	bcc.n	8001ab8 <QF_gc+0x5c>
 8001aae:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <QF_gc+0x80>)
 8001ab4:	f7fe fef9 	bl	80008aa <Q_onAssert>
            QF_EPOOL_PUT_(QF_ePool_[idx], QF_CONST_CAST_(QEvt*, e), 0U);
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <QF_gc+0x84>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f8e8 	bl	8001ca0 <QMPool_put>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000118c 	.word	0x2000118c
 8001adc:	08004d30 	.word	0x08004d30
 8001ae0:	20001190 	.word	0x20001190

08001ae4 <QMPool_init>:
/*${QF::QMPool::init} ......................................................*/
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t poolSize,
    uint_fast16_t blockSize)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
    /*! @pre The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <QMPool_init+0x22>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d903      	bls.n	8001b06 <QMPool_init+0x22>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f113 0f05 	cmn.w	r3, #5
 8001b04:	d903      	bls.n	8001b0e <QMPool_init+0x2a>
 8001b06:	2164      	movs	r1, #100	; 0x64
 8001b08:	482e      	ldr	r0, [pc, #184]	; (8001bc4 <QMPool_init+0xe0>)
 8001b0a:	f7fe fece 	bl	80008aa <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	609a      	str	r2, [r3, #8]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2204      	movs	r2, #4
 8001b18:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8001b1e:	e008      	b.n	8001b32 <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	899b      	ldrh	r3, [r3, #12]
 8001b24:	3304      	adds	r3, #4
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	899a      	ldrh	r2, [r3, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3f0      	bcc.n	8001b20 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	899b      	ldrh	r3, [r3, #12]
 8001b42:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d203      	bcs.n	8001b54 <QMPool_init+0x70>
 8001b4c:	216e      	movs	r1, #110	; 0x6e
 8001b4e:	481d      	ldr	r0, [pc, #116]	; (8001bc4 <QMPool_init+0xe0>)
 8001b50:	f7fe feab 	bl	80008aa <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8001b68:	e012      	b.n	8001b90 <QMPool_init+0xac>
        fb->next = &fb[nblocks]; /* point next link to next block */
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	441a      	add	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	89db      	ldrh	r3, [r3, #14]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d2e8      	bcs.n	8001b6a <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	89da      	ldrh	r2, [r3, #14]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	89da      	ldrh	r2, [r3, #14]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	601a      	str	r2, [r3, #0]
    me->end   = fb;              /* the last block in this pool */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08004d38 	.word	0x08004d38

08001bc8 <QMPool_get>:

/*${QF::QMPool::get} .......................................................*/
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qs_id)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001bd4:	233f      	movs	r3, #63	; 0x3f
 8001bd6:	b672      	cpsid	i
 8001bd8:	f383 8811 	msr	BASEPRI, r3
 8001bdc:	b662      	cpsie	i

    /* have more free blocks than the requested margin? */
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8a1b      	ldrh	r3, [r3, #16]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d94d      	bls.n	8001c88 <QMPool_get+0xc0>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	617b      	str	r3, [r7, #20]

        /* the pool has some free blocks, so a free block must be available */
        Q_ASSERT_CRIT_(310, fb != (QFreeBlock *)0);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <QMPool_get+0x40>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001c02:	4826      	ldr	r0, [pc, #152]	; (8001c9c <QMPool_get+0xd4>)
 8001c04:	f7fe fe51 	bl	80008aa <Q_onAssert>

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8a1b      	ldrh	r3, [r3, #16]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) {
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8a1b      	ldrh	r3, [r3, #16]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10e      	bne.n	8001c44 <QMPool_get+0x7c>
            /* pool is becoming empty, so the next free block must be NULL */
            Q_ASSERT_CRIT_(320, fb_next == (QFreeBlock *)0);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <QMPool_get+0x74>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001c36:	4819      	ldr	r0, [pc, #100]	; (8001c9c <QMPool_get+0xd4>)
 8001c38:	f7fe fe37 	bl	80008aa <Q_onAssert>

            me->nMin = 0U; /* remember that the pool got empty */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	825a      	strh	r2, [r3, #18]
 8001c42:	e01d      	b.n	8001c80 <QMPool_get+0xb8>
            *
            * NOTE: the next free block pointer can fall out of range
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */
            Q_ASSERT_CRIT_(330, QF_PTR_RANGE_(fb_next, me->start, me->end));
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d304      	bcc.n	8001c58 <QMPool_get+0x90>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d907      	bls.n	8001c68 <QMPool_get+0xa0>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <QMPool_get+0xd4>)
 8001c64:	f7fe fe21 	bl	80008aa <Q_onAssert>

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8a5a      	ldrh	r2, [r3, #18]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8a1b      	ldrh	r3, [r3, #16]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d904      	bls.n	8001c80 <QMPool_get+0xb8>
                me->nMin = me->nFree; /* remember the new minimum */
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8a1b      	ldrh	r3, [r3, #16]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	e001      	b.n	8001c8c <QMPool_get+0xc4>
            QS_MPC_PRE_(me->nMin);  /* min # free blocks ever in the pool */
        QS_END_NOCRIT_PRE_()
    }
    /* don't have enough free blocks at this point */
    else {
        fb = (QFreeBlock *)0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
            QS_OBJ_PRE_(me);        /* this memory pool */
            QS_MPC_PRE_(me->nFree); /* # of free blocks in the pool */
            QS_MPC_PRE_(margin);    /* the requested margin */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f383 8811 	msr	BASEPRI, r3

    return fb;  /* return the block or NULL pointer to the caller */
 8001c92:	697b      	ldr	r3, [r7, #20]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	08004d38 	.word	0x08004d38

08001ca0 <QMPool_put>:

/*${QF::QMPool::put} .......................................................*/
void QMPool_put(QMPool * const me,
    void * const b,
    uint_fast8_t const qs_id)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* when Q_SPY undefined */

    /*! @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8a1b      	ldrh	r3, [r3, #16]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	89db      	ldrh	r3, [r3, #14]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d209      	bcs.n	8001cce <QMPool_put+0x2e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d304      	bcc.n	8001cce <QMPool_put+0x2e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d903      	bls.n	8001cd6 <QMPool_put+0x36>
 8001cce:	21c8      	movs	r1, #200	; 0xc8
 8001cd0:	480e      	ldr	r0, [pc, #56]	; (8001d0c <QMPool_put+0x6c>)
 8001cd2:	f7fe fdea 	bl	80008aa <Q_onAssert>
                      && QF_PTR_RANGE_(b, me->start, me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001cd6:	233f      	movs	r3, #63	; 0x3f
 8001cd8:	b672      	cpsid	i
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	609a      	str	r2, [r3, #8]
    ++me->nFree;            /* one more free block in this pool */
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8a1b      	ldrh	r3, [r3, #16]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f383 8811 	msr	BASEPRI, r3
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08004d38 	.word	0x08004d38

08001d10 <QF_bzero>:

/*${QF::QF-pkg::bzero} .....................................................*/
void QF_bzero(
    void * const start,
    uint_fast16_t const len)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	e008      	b.n	8001d36 <QF_bzero+0x26>
        *ptr = 0U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f3      	bne.n	8001d24 <QF_bzero+0x14>
    }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <QActive_ctor>:
/*$define${QF::QActive::ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::ctor} .....................................................*/
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 8001d56:	2120      	movs	r1, #32
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffd9 	bl	8001d10 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fa28 	bl	80011b8 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <QActive_ctor+0x2c>)
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08004d48 	.word	0x08004d48

08001d7c <QActive_register_>:
/*$enddef${QF::QActive::ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::register_} ................................................*/
void QActive_register_(QActive * const me) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    if (me->pthre == 0U) { /* preemption-threshold not defined? */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7f5b      	ldrb	r3, [r3, #29]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <QActive_register_+0x18>
        me->pthre = me->prio; /* apply the default */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7f1a      	ldrb	r2, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	775a      	strb	r2, [r3, #29]
    /*! @pre
    * 1. the "QF-priority" of the AO must be in range
    * 2. the "QF-priority" must not be already in use (unique priority)
    * 3. the "QF-priority" must not exceed the "preemption-threshold"
    */
    Q_REQUIRE_ID(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7f1b      	ldrb	r3, [r3, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d011      	beq.n	8001dc0 <QActive_register_+0x44>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7f1b      	ldrb	r3, [r3, #28]
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d80d      	bhi.n	8001dc0 <QActive_register_+0x44>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f1b      	ldrb	r3, [r3, #28]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <QActive_register_+0xfc>)
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <QActive_register_+0x44>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7f1a      	ldrb	r2, [r3, #28]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7f5b      	ldrb	r3, [r3, #29]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d903      	bls.n	8001dc8 <QActive_register_+0x4c>
 8001dc0:	2164      	movs	r1, #100	; 0x64
 8001dc2:	482e      	ldr	r0, [pc, #184]	; (8001e7c <QActive_register_+0x100>)
 8001dc4:	f7fe fd71 	bl	80008aa <Q_onAssert>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7f5b      	ldrb	r3, [r3, #29]
 8001dcc:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7f5b      	ldrb	r3, [r3, #29]
 8001dd2:	73bb      	strb	r3, [r7, #14]
    uint_fast8_t p;

    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7f1b      	ldrb	r3, [r3, #28]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	e00f      	b.n	8001dfe <QActive_register_+0x82>
        if (QActive_registry_[p] != (QActive *)0) {
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <QActive_register_+0xfc>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <QActive_register_+0x7c>
            prev_thre = QActive_registry_[p]->pthre;
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <QActive_register_+0xfc>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	7f5b      	ldrb	r3, [r3, #29]
 8001df4:	73fb      	strb	r3, [r7, #15]
            break;
 8001df6:	e005      	b.n	8001e04 <QActive_register_+0x88>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ec      	bne.n	8001dde <QActive_register_+0x62>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7f1b      	ldrb	r3, [r3, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	e00f      	b.n	8001e2e <QActive_register_+0xb2>
        if (QActive_registry_[p] != (QActive *)0) {
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <QActive_register_+0xfc>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <QActive_register_+0xac>
            next_thre = QActive_registry_[p]->pthre;
 8001e1a:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <QActive_register_+0xfc>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	7f5b      	ldrb	r3, [r3, #29]
 8001e24:	73bb      	strb	r3, [r7, #14]
            break;
 8001e26:	e005      	b.n	8001e34 <QActive_register_+0xb8>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d9ec      	bls.n	8001e0e <QActive_register_+0x92>

    /*! @post
    * 1. the preceding pre-thre must not exceed the preemption-threshold
    * 2. the preemption-threshold must not exceed the next pre-thre
    */
    Q_ENSURE_ID(101, (prev_thre <= me->pthre) && (me->pthre <= next_thre));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d804      	bhi.n	8001e48 <QActive_register_+0xcc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f5b      	ldrb	r3, [r3, #29]
 8001e42:	7bba      	ldrb	r2, [r7, #14]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d203      	bcs.n	8001e50 <QActive_register_+0xd4>
 8001e48:	2165      	movs	r1, #101	; 0x65
 8001e4a:	480c      	ldr	r0, [pc, #48]	; (8001e7c <QActive_register_+0x100>)
 8001e4c:	f7fe fd2d 	bl	80008aa <Q_onAssert>

    #endif // Q_NASSERT

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001e50:	233f      	movs	r3, #63	; 0x3f
 8001e52:	b672      	cpsid	i
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	b662      	cpsie	i
    /* register the AO at the "QF-priority" */
    QActive_registry_[me->prio] = me;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <QActive_register_+0xfc>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    QF_CRIT_X_();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f383 8811 	msr	BASEPRI, r3
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200011cc 	.word	0x200011cc
 8001e7c:	08004d40 	.word	0x08004d40

08001e80 <QEQueue_init>:

/*${QF::QEQueue::init} .....................................................*/
void QEQueue_init(QEQueue * const me,
    QEvt const * qSto[],
    uint_fast16_t const qLen)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <QEQueue_init+0x32>
        me->head = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7adb      	ldrb	r3, [r3, #11]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	731a      	strb	r2, [r3, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <QTimeEvt_ctorX>:
/*${QF::QTimeEvt::ctorX} ...................................................*/
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
    /*! @pre The signal must be valid and the tick rate in range */
    Q_REQUIRE_ID(300, (sig != 0)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <QTimeEvt_ctorX+0x1a>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d904      	bls.n	8001ef8 <QTimeEvt_ctorX+0x24>
 8001eee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ef2:	480f      	ldr	r0, [pc, #60]	; (8001f30 <QTimeEvt_ctorX+0x5c>)
 8001ef4:	f7fe fcd9 	bl	80008aa <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
    me->interval  = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    me->super.sig = (QSignal)sig;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with QTimeEvt_ctor(), the active object
    * pointer can be uninitialized (NULL) and is NOT validated in the
    * precondition. The active object pointer is validated in preconditions
    * to QTimeEvt_arm_() and QTimeEvt_rearm().
    */
    me->act       = act;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	70da      	strb	r2, [r3, #3]
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	08004d5c 	.word	0x08004d5c

08001f34 <QTimeEvt_armX>:

/*${QF::QTimeEvt::armX} ....................................................*/
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	78db      	ldrb	r3, [r3, #3]
 8001f44:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	613b      	str	r3, [r7, #16]
    #endif

    /*! @pre the host AO must be valid, time evnet must be disarmed,
    * number of clock ticks cannot be zero, and the signal must be valid.
    */
    Q_REQUIRE_ID(400, (me->act != (void *)0)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <QTimeEvt_armX+0x40>
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <QTimeEvt_armX+0x40>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <QTimeEvt_armX+0x40>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d803      	bhi.n	8001f74 <QTimeEvt_armX+0x40>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d804      	bhi.n	8001f7e <QTimeEvt_armX+0x4a>
 8001f74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f78:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <QTimeEvt_armX+0xb4>)
 8001f7a:	f7fe fc96 	bl	80008aa <Q_onAssert>
    #ifdef Q_NASSERT
    (void)ctr; /* avoid compiler warning about unused variable */
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001f7e:	233f      	movs	r3, #63	; 0x3f
 8001f80:	b672      	cpsid	i
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	b662      	cpsie	i
    me->ctr = nTicks;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in QTimeEvt_tick_().
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db1c      	blt.n	8001fda <QTimeEvt_armX+0xa6>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	78db      	ldrb	r3, [r3, #3]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QTimeEvt_tick_()
        * function.
        */
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <QTimeEvt_armX+0xb8>)
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8001fc6:	4909      	ldr	r1, [pc, #36]	; (8001fec <QTimeEvt_armX+0xb8>)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f383 8811 	msr	BASEPRI, r3
}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08004d5c 	.word	0x08004d5c
 8001fec:	20001254 	.word	0x20001254

08001ff0 <QTimeEvt_tick_>:

/*${QF::QTimeEvt::tick_} ...................................................*/
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(sender); /* when Q_SPY undefined */

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <QTimeEvt_tick_+0x140>)
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800200a:	233f      	movs	r3, #63	; 0x3f
 800200c:	b672      	cpsid	i
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d12c      	bne.n	800207a <QTimeEvt_tick_+0x8a>

            /* any new time events armed since the last QTimeEvt_tick_()? */
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8002020:	4943      	ldr	r1, [pc, #268]	; (8002130 <QTimeEvt_tick_+0x140>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3308      	adds	r3, #8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d074      	beq.n	8002120 <QTimeEvt_tick_+0x130>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <QTimeEvt_tick_+0x5a>
 800203c:	2300      	movs	r3, #0
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	216e      	movs	r1, #110	; 0x6e
 8002044:	483b      	ldr	r0, [pc, #236]	; (8002134 <QTimeEvt_tick_+0x144>)
 8002046:	f7fe fc30 	bl	80008aa <Q_onAssert>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 800204a:	4939      	ldr	r1, [pc, #228]	; (8002130 <QTimeEvt_tick_+0x140>)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3308      	adds	r3, #8
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8002060:	4933      	ldr	r1, [pc, #204]	; (8002130 <QTimeEvt_tick_+0x140>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3308      	adds	r3, #8
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d111      	bne.n	80020a6 <QTimeEvt_tick_+0xb6>
            prev->next = t->next;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002094:	b2da      	uxtb	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 800209a:	2300      	movs	r3, #0
 800209c:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	e036      	b.n	8002114 <QTimeEvt_tick_+0x124>
        }
        else {
            --t->ctr;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	60da      	str	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d126      	bne.n	8002106 <QTimeEvt_tick_+0x116>
                /* temporary for volatile */
                QActive * const act = (QActive *)t->act;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <QTimeEvt_tick_+0xe4>
                    t->ctr = t->interval; /* rearm the time event */
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e00b      	b.n	80020ec <QTimeEvt_tick_+0xfc>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	78db      	ldrb	r3, [r3, #3]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 80020ec:	2300      	movs	r3, #0
 80020ee:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68dc      	ldr	r4, [r3, #12]
 80020f8:	6939      	ldr	r1, [r7, #16]
 80020fa:	2300      	movs	r3, #0
 80020fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	47a0      	blx	r4
 8002104:	e006      	b.n	8002114 <QTimeEvt_tick_+0x124>
            }
            else {
                prev = t;         /* advance to this time event */
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 800210a:	2300      	movs	r3, #0
 800210c:	f383 8811 	msr	BASEPRI, r3
                * two adjacent critical sections would be merged. The
                * QF_CRIT_EXIT_NOP() macro contains minimal code required
                * to prevent such merging of critical sections in QF ports,
                * in which it can occur.
                */
                QF_CRIT_EXIT_NOP();
 8002110:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8002114:	233f      	movs	r3, #63	; 0x3f
 8002116:	b672      	cpsid	i
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	b662      	cpsie	i
    for (;;) {
 800211e:	e779      	b.n	8002014 <QTimeEvt_tick_+0x24>
                break; /* all currently armed time evts. processed */
 8002120:	bf00      	nop
    }
    QF_CRIT_X_();
 8002122:	2300      	movs	r3, #0
 8002124:	f383 8811 	msr	BASEPRI, r3
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	20001254 	.word	0x20001254
 8002134:	08004d5c 	.word	0x08004d5c

08002138 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
        return (me->bits != 0U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <QPSet_remove>:

/*! Remove element `n` from the set (n = 1U..::QF_MAX_ACTIVE) */
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
        me->bits = (me->bits &
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
            (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43db      	mvns	r3, r3
        me->bits = (me->bits &
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
        }
        else {
            (me->bits[1] = (me->bits[1] & ~((uint32_t)1U << (n - 33U))));
        }
    #endif
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <QPSet_findMax>:

/*! Find the maximum element in the set, returns zero if the set is empty */
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
    #if (QF_MAX_ACTIVE <= 32)
        return QF_LOG2(me->bits);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	f1c3 0320 	rsb	r3, r3, #32
    #else
        return (me->bits[1] != 0U)
            ? (QF_LOG2(me->bits[1]) + 32U)
            : (QF_LOG2(me->bits[0]));
    #endif
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <QF_init>:
/*$define${QV::QV-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*$enddef${QV::QV-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QV::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QV::QF-cust::init} .....................................................*/
void QF_init(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    #if (QF_MAX_EPOOL > 0U)
    QF_maxPool_ = 0U;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <QF_init+0x2c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    #endif

    QF_bzero(&QTimeEvt_timeEvtHead_[0], sizeof(QTimeEvt_timeEvtHead_));
 80021b2:	2128      	movs	r1, #40	; 0x28
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <QF_init+0x30>)
 80021b6:	f7ff fdab 	bl	8001d10 <QF_bzero>
    QF_bzero(&QActive_registry_[0],     sizeof(QActive_registry_));
 80021ba:	2184      	movs	r1, #132	; 0x84
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <QF_init+0x34>)
 80021be:	f7ff fda7 	bl	8001d10 <QF_bzero>
    QF_bzero(&QF_readySet_,             sizeof(QF_readySet_));
 80021c2:	2104      	movs	r1, #4
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <QF_init+0x38>)
 80021c6:	f7ff fda3 	bl	8001d10 <QF_bzero>

    #ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 80021ca:	f000 f8b3 	bl	8002334 <QV_init>
    #endif
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000118c 	.word	0x2000118c
 80021d8:	20001254 	.word	0x20001254
 80021dc:	200011cc 	.word	0x200011cc
 80021e0:	20001250 	.word	0x20001250

080021e4 <QF_run>:
    QF_onCleanup(); /* application-specific cleanup callback */
    /* nothing else to do for the cooperative QV kernel */
}

/*${QV::QF-cust::run} ......................................................*/
int_t QF_run(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
    #ifdef Q_SPY
    uint_fast8_t pprev = 0U; /* previously used priority */
    #endif

    QF_onStartup(); /* application-specific startup callback */
 80021ea:	f7fe fb4d 	bl	8000888 <QF_onStartup>

    /* the combined event-loop and background-loop of the QV kernel... */
    QF_INT_DISABLE();
 80021ee:	233f      	movs	r3, #63	; 0x3f
 80021f0:	b672      	cpsid	i
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	b662      	cpsie	i
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    for (;;) {
        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QF_readySet_)) {
 80021f8:	481a      	ldr	r0, [pc, #104]	; (8002264 <QF_run+0x80>)
 80021fa:	f7ff ff9d 	bl	8002138 <QPSet_notEmpty>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d027      	beq.n	8002254 <QF_run+0x70>
            uint_fast8_t const p = QPSet_findMax(&QF_readySet_);
 8002204:	4817      	ldr	r0, [pc, #92]	; (8002264 <QF_run+0x80>)
 8002206:	f7ff ffbe 	bl	8002186 <QPSet_findMax>
 800220a:	60f8      	str	r0, [r7, #12]
            QActive * const a = QActive_registry_[p];
 800220c:	4a16      	ldr	r2, [pc, #88]	; (8002268 <QF_run+0x84>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	60bb      	str	r3, [r7, #8]
            QS_END_NOCRIT_PRE_()

            pprev = p; /* update previous priority */
    #endif /* Q_SPY */

            QF_INT_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which by this
            *    time must be non-empty and The "Vanialla" kernel asserts it.
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 800221c:	68b8      	ldr	r0, [r7, #8]
 800221e:	f7ff fb1f 	bl	8001860 <QActive_get_>
 8002222:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	68b8      	ldr	r0, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fc12 	bl	8001a5c <QF_gc>
    #endif
            QF_INT_DISABLE();
 8002238:	233f      	movs	r3, #63	; 0x3f
 800223a:	b672      	cpsid	i
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1d6      	bne.n	80021f8 <QF_run+0x14>
                QPSet_remove(&QF_readySet_, p);
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <QF_run+0x80>)
 800224e:	f7ff ff84 	bl	800215a <QPSet_remove>
 8002252:	e7d1      	b.n	80021f8 <QF_run+0x14>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
 8002254:	f7fe fb1f 	bl	8000896 <QV_onIdle>

            QF_INT_DISABLE();
 8002258:	233f      	movs	r3, #63	; 0x3f
 800225a:	b672      	cpsid	i
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	b662      	cpsie	i
        if (QPSet_notEmpty(&QF_readySet_)) {
 8002262:	e7c9      	b.n	80021f8 <QF_run+0x14>
 8002264:	20001250 	.word	0x20001250
 8002268:	200011cc 	.word	0x200011cc

0800226c <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSize); /* not needed in QV */

    /*! @pre Stack storage must not be provided because the QV kernel
    * does not need per-AO stacks.
    */
    Q_REQUIRE_ID(500, stkSto == (void *)0);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <QActive_start_+0x20>
 8002282:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002286:	4815      	ldr	r0, [pc, #84]	; (80022dc <QActive_start_+0x70>)
 8002288:	f7fe fb0f 	bl	80008aa <Q_onAssert>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); /* QF-priority of the AO */
 800228c:	897b      	ldrh	r3, [r7, #10]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	771a      	strb	r2, [r3, #28]
    me->pthre = (uint8_t)(prioSpec >> 8U);   /* preemption-threshold */
 8002294:	897b      	ldrh	r3, [r7, #10]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	775a      	strb	r2, [r3, #29]
    QActive_register_(me); /* make QF aware of this active object */
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff fd6b 	bl	8001d7c <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); /* init the built-in queue */
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	330c      	adds	r3, #12
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fde6 	bl	8001e80 <QEQueue_init>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <QActive_start_+0x58>
 80022bc:	21c7      	movs	r1, #199	; 0xc7
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <QActive_start_+0x70>)
 80022c0:	f7fe faf3 	bl	80008aa <Q_onAssert>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	6a39      	ldr	r1, [r7, #32]
 80022d0:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	08004d64 	.word	0x08004d64

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022e6:	490e      	ldr	r1, [pc, #56]	; (8002320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022fc:	4c0b      	ldr	r4, [pc, #44]	; (800232c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230a:	f7fe fdd3 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f002 fcad 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fad5 	bl	80008c0 <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002324:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 8002328:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800232c:	20001280 	.word	0x20001280

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
    uint32_t n;

    /* set exception priorities to QF_BASEPRI...
    * SCB_SYSPRI1: Usage-fault, Bus-fault, Memory-fault
    */
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <QV_init+0x6c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <QV_init+0x6c>)
        | (QF_BASEPRI << 16) | (QF_BASEPRI << 8) | QF_BASEPRI);
 8002340:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
 8002344:	f443 537c 	orr.w	r3, r3, #16128	; 0x3f00
    SCB_SYSPRI[1] = (SCB_SYSPRI[1]
 8002348:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI2: SVCall */
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24));
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <QV_init+0x70>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <QV_init+0x70>)
 8002350:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002354:	6013      	str	r3, [r2, #0]

    /* SCB_SYSPRI3:  SysTick, PendSV, Debug */
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <QV_init+0x74>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <QV_init+0x74>)
        | (QF_BASEPRI << 24) | (QF_BASEPRI << 16) | QF_BASEPRI);
 800235c:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8002360:	f043 133f 	orr.w	r3, r3, #4128831	; 0x3f003f
    SCB_SYSPRI[3] = (SCB_SYSPRI[3]
 8002364:	6013      	str	r3, [r2, #0]

    /* set all implemented IRQ priories to QF_BASEPRI... */
    n = 8U + ((*SCnSCB_ICTR & 0x7U) << 3); /* (# NVIC_PRIO registers)/4 */
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <QV_init+0x78>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002370:	3308      	adds	r3, #8
 8002372:	607b      	str	r3, [r7, #4]
    do {
        --n;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	607b      	str	r3, [r7, #4]
        NVIC_IP[n] = (QF_BASEPRI << 24) | (QF_BASEPRI << 16)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002382:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002386:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 800238a:	601a      	str	r2, [r3, #0]
                     | (QF_BASEPRI << 8) | QF_BASEPRI;
    } while (n != 0);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <QV_init+0x40>
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed18 	.word	0xe000ed18
 80023a4:	e000ed1c 	.word	0xe000ed1c
 80023a8:	e000ed20 	.word	0xe000ed20
 80023ac:	e000e004 	.word	0xe000e004

080023b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_Init+0x40>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_Init+0x40>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_Init+0x40>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 f90d 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	200f      	movs	r0, #15
 80023e0:	f000 f808 	bl	80023f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e4:	f7fe fc6c 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_InitTick+0x54>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x58>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f917 	bl	8002646 <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f000 f8ed 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_InitTick+0x5c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000030 	.word	0x20000030
 800244c:	2000003c 	.word	0x2000003c
 8002450:	20000038 	.word	0x20000038

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000003c 	.word	0x2000003c
 8002478:	2000127c 	.word	0x2000127c

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000127c 	.word	0x2000127c

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff47 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff5c 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffb0 	bl	80025b4 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e16b      	b.n	8002954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 815a 	bne.w	800294e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d005      	beq.n	80026b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d130      	bne.n	8002714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0201 	and.w	r2, r3, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d017      	beq.n	8002750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d123      	bne.n	80027a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80b4 	beq.w	800294e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b60      	ldr	r3, [pc, #384]	; (800296c <HAL_GPIO_Init+0x30c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a5f      	ldr	r2, [pc, #380]	; (800296c <HAL_GPIO_Init+0x30c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b5d      	ldr	r3, [pc, #372]	; (800296c <HAL_GPIO_Init+0x30c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_GPIO_Init+0x310>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x314>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x226>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_GPIO_Init+0x318>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x222>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_GPIO_Init+0x31c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x21e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4f      	ldr	r2, [pc, #316]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x21a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4e      	ldr	r2, [pc, #312]	; (8002984 <HAL_GPIO_Init+0x324>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x216>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4d      	ldr	r2, [pc, #308]	; (8002988 <HAL_GPIO_Init+0x328>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x212>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4c      	ldr	r2, [pc, #304]	; (800298c <HAL_GPIO_Init+0x32c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4b      	ldr	r2, [pc, #300]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x20a>
 8002866:	2307      	movs	r3, #7
 8002868:	e00e      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286a:	2308      	movs	r3, #8
 800286c:	e00c      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286e:	2306      	movs	r3, #6
 8002870:	e00a      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002872:	2305      	movs	r3, #5
 8002874:	e008      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002876:	2304      	movs	r3, #4
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002886:	2300      	movs	r3, #0
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002898:	4935      	ldr	r1, [pc, #212]	; (8002970 <HAL_GPIO_Init+0x310>)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291e:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x334>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_GPIO_Init+0x334>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002948:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_GPIO_Init+0x334>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f ae90 	bls.w	800267c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	40013800 	.word	0x40013800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40021400 	.word	0x40021400
 800298c:	40021800 	.word	0x40021800
 8002990:	40021c00 	.word	0x40021c00
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	041a      	lsls	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e12b      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f95a 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a94:	f001 fb92 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a81      	ldr	r2, [pc, #516]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d807      	bhi.n	8002ab4 <HAL_I2C_Init+0x84>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a80      	ldr	r2, [pc, #512]	; (8002ca8 <HAL_I2C_Init+0x278>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e006      	b.n	8002ac2 <HAL_I2C_Init+0x92>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <HAL_I2C_Init+0x27c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e7      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a78      	ldr	r2, [pc, #480]	; (8002cb0 <HAL_I2C_Init+0x280>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d802      	bhi.n	8002b04 <HAL_I2C_Init+0xd4>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	e009      	b.n	8002b18 <HAL_I2C_Init+0xe8>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_I2C_Init+0x284>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3301      	adds	r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	495c      	ldr	r1, [pc, #368]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d819      	bhi.n	8002b6c <HAL_I2C_Init+0x13c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_I2C_Init+0x138>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e59      	subs	r1, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	e051      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e04f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_I2C_Init+0x168>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e012      	b.n	8002bbe <HAL_I2C_Init+0x18e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	0099      	lsls	r1, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x196>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e022      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10e      	bne.n	8002bec <HAL_I2C_Init+0x1bc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e58      	subs	r0, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	440b      	add	r3, r1
 8002bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	0099      	lsls	r1, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6809      	ldr	r1, [r1, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6911      	ldr	r1, [r2, #16]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	000186a0 	.word	0x000186a0
 8002ca8:	001e847f 	.word	0x001e847f
 8002cac:	003d08ff 	.word	0x003d08ff
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fbd6 	bl	800247c <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 80e0 	bne.w	8002ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4970      	ldr	r1, [pc, #448]	; (8002eac <HAL_I2C_Master_Transmit+0x1f4>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fc58 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0d3      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0cc      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fac2 	bl	8003300 <I2C_MasterRequestWrite>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e08d      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d9c:	e066      	b.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fcd2 	bl	800374c <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11b      	bne.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fcc2 	bl	80037ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d194      	bne.n	8002d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	00100002 	.word	0x00100002
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	817b      	strh	r3, [r7, #10]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff fad8 	bl	800247c <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 820b 	bne.w	80032f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2319      	movs	r3, #25
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	497c      	ldr	r1, [pc, #496]	; (80030d8 <HAL_I2C_Master_Receive+0x224>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fb5a 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e1fe      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2C_Master_Receive+0x50>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e1f7      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d007      	beq.n	8002f2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2222      	movs	r2, #34	; 0x22
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2210      	movs	r2, #16
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a5c      	ldr	r2, [pc, #368]	; (80030dc <HAL_I2C_Master_Receive+0x228>)
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f6c:	8979      	ldrh	r1, [r7, #10]
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa46 	bl	8003404 <I2C_MasterRequestRead>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e1b8      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d113      	bne.n	8002fb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e18c      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11b      	bne.n	8002ff2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e16c      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d11b      	bne.n	8003032 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	e14c      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003058:	e138      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b03      	cmp	r3, #3
 8003060:	f200 80f1 	bhi.w	8003246 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	2b01      	cmp	r3, #1
 800306a:	d123      	bne.n	80030b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fbed 	bl	8003850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e139      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b2:	e10b      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d14e      	bne.n	800315a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	2200      	movs	r2, #0
 80030c4:	4906      	ldr	r1, [pc, #24]	; (80030e0 <HAL_I2C_Master_Receive+0x22c>)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa6a 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e10e      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
 80030d6:	bf00      	nop
 80030d8:	00100002 	.word	0x00100002
 80030dc:	ffff0000 	.word	0xffff0000
 80030e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003158:	e0b8      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2200      	movs	r2, #0
 8003162:	4966      	ldr	r1, [pc, #408]	; (80032fc <HAL_I2C_Master_Receive+0x448>)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa1b 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0bf      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	494f      	ldr	r1, [pc, #316]	; (80032fc <HAL_I2C_Master_Receive+0x448>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f9ed 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e091      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003244:	e042      	b.n	80032cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb00 	bl	8003850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e04c      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d118      	bne.n	80032cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f aec2 	bne.w	800305a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010004 	.word	0x00010004

08003300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d006      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003328:	d108      	bne.n	800333c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	2b12      	cmp	r3, #18
 8003342:	d107      	bne.n	8003354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f91d 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d103      	bne.n	8003384 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e035      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003390:	d108      	bne.n	80033a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e01b      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	11db      	asrs	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 030f 	orn	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <I2C_MasterRequestWrite+0xfc>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f943 	bl	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e010      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4907      	ldr	r1, [pc, #28]	; (8003400 <I2C_MasterRequestWrite+0x100>)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f933 	bl	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	00010008 	.word	0x00010008
 8003400:	00010002 	.word	0x00010002

08003404 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003428:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d006      	beq.n	800343e <I2C_MasterRequestRead+0x3a>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d003      	beq.n	800343e <I2C_MasterRequestRead+0x3a>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800343c:	d108      	bne.n	8003450 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00b      	b.n	8003468 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	2b11      	cmp	r3, #17
 8003456:	d107      	bne.n	8003468 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f893 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e079      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d108      	bne.n	80034b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e05f      	b.n	8003578 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	11db      	asrs	r3, r3, #7
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f063 030f 	orn	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4930      	ldr	r1, [pc, #192]	; (8003598 <I2C_MasterRequestRead+0x194>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8b9 	bl	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e054      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4929      	ldr	r1, [pc, #164]	; (800359c <I2C_MasterRequestRead+0x198>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8a9 	bl	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e044      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f831 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003552:	d103      	bne.n	800355c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e017      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003560:	897b      	ldrh	r3, [r7, #10]
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030e 	orn	r3, r3, #14
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4907      	ldr	r1, [pc, #28]	; (800359c <I2C_MasterRequestRead+0x198>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f865 	bl	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00010008 	.word	0x00010008
 800359c:	00010002 	.word	0x00010002

080035a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b0:	e025      	b.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d021      	beq.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fe ff5f 	bl	800247c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d116      	bne.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e023      	b.n	8003646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10d      	bne.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	e00c      	b.n	800363e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d0b6      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800365c:	e051      	b.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d123      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f043 0204 	orr.w	r2, r3, #4
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e046      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d021      	beq.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fedd 	bl	800247c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d116      	bne.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e020      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e00b      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d18d      	bne.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003758:	e02d      	b.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f8ce 	bl	80038fc <I2C_IsAcknowledgeFailed>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e02d      	b.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d021      	beq.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe fe83 	bl	800247c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d116      	bne.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d1ca      	bne.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037da:	e02d      	b.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f88d 	bl	80038fc <I2C_IsAcknowledgeFailed>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e02d      	b.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d021      	beq.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fe fe42 	bl	800247c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d1ca      	bne.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385c:	e042      	b.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	d119      	bne.n	80038a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0210 	mvn.w	r2, #16
 8003874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e029      	b.n	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7fe fdec 	bl	800247c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d1b5      	bne.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d11b      	bne.n	800394c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800391c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e267      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b7e      	ldr	r3, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e242      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6f      	ldr	r2, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6c      	ldr	r2, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe fd32 	bl	800247c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fd2e 	bl	800247c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e207      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fd1e 	bl	800247c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe fd1a 	bl	800247c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1f3      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1c7      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4937      	ldr	r1, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fcd3 	bl	800247c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fccf 	bl	800247c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1a8      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4925      	ldr	r1, [pc, #148]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x244>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe fcb2 	bl	800247c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fcae 	bl	800247c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e187      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d036      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fe fc92 	bl	800247c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fc8e 	bl	800247c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e167      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x240>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
 8003b7a:	e01b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_OscConfig+0x248>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fe fc7b 	bl	800247c <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e00e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fc77 	bl	800247c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d907      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e150      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	42470000 	.word	0x42470000
 8003ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ea      	bne.n	8003b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8097 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b77      	ldr	r3, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a73      	ldr	r2, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fc37 	bl	800247c <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fe fc33 	bl	800247c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e10c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x474>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2ea>
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a63      	ldr	r2, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e01c      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x30c>
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a5b      	ldr	r2, [pc, #364]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x324>
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a57      	ldr	r2, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a54      	ldr	r2, [pc, #336]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fe fbf8 	bl	800247c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe fbf4 	bl	800247c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0cb      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <HAL_RCC_OscConfig+0x334>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fbe2 	bl	800247c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fbde 	bl	800247c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0b5      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ee      	bne.n	8003cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a1 	beq.w	8003e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d05c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d141      	bne.n	8003d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fe fbb2 	bl	800247c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe fbae 	bl	800247c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e087      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	491b      	ldr	r1, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fb87 	bl	800247c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fe fb83 	bl	800247c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e05c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x416>
 8003d90:	e054      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_OscConfig+0x478>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fb70 	bl	800247c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fe fb6c 	bl	800247c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e045      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x470>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x444>
 8003dbe:	e03d      	b.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e038      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d028      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d121      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11a      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d111      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0cc      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d90c      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d044      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d119      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e067      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4934      	ldr	r1, [pc, #208]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f3c:	f7fe fa9e 	bl	800247c <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fe fa9a 	bl	800247c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e04f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d20c      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f9fe 	bl	80023f4 <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	40023800 	.word	0x40023800
 800400c:	08004ce4 	.word	0x08004ce4
 8004010:	20000030 	.word	0x20000030
 8004014:	20000038 	.word	0x20000038

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b090      	sub	sp, #64	; 0x40
 800401e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
 8004024:	2300      	movs	r3, #0
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004028:	2300      	movs	r3, #0
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d00d      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x40>
 800403c:	2b08      	cmp	r3, #8
 800403e:	f200 80a1 	bhi.w	8004184 <HAL_RCC_GetSysClockFreq+0x16c>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3a>
 800404a:	e09b      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b53      	ldr	r3, [pc, #332]	; (800419c <HAL_RCC_GetSysClockFreq+0x184>)
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004050:	e09b      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004056:	e098      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d028      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	2200      	movs	r2, #0
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	627a      	str	r2, [r7, #36]	; 0x24
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004080:	2100      	movs	r1, #0
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004084:	fb03 f201 	mul.w	r2, r3, r1
 8004088:	2300      	movs	r3, #0
 800408a:	fb00 f303 	mul.w	r3, r0, r3
 800408e:	4413      	add	r3, r2
 8004090:	4a43      	ldr	r2, [pc, #268]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004092:	fba0 1202 	umull	r1, r2, r0, r2
 8004096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004098:	460a      	mov	r2, r1
 800409a:	62ba      	str	r2, [r7, #40]	; 0x28
 800409c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800409e:	4413      	add	r3, r2
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a4:	2200      	movs	r2, #0
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	61fa      	str	r2, [r7, #28]
 80040aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040b2:	f7fc f889 	bl	80001c8 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4613      	mov	r3, r2
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	e053      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c0:	4b35      	ldr	r3, [pc, #212]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	2200      	movs	r2, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	617a      	str	r2, [r7, #20]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040d2:	f04f 0b00 	mov.w	fp, #0
 80040d6:	4652      	mov	r2, sl
 80040d8:	465b      	mov	r3, fp
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e8:	0150      	lsls	r0, r2, #5
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	ebb2 080a 	subs.w	r8, r2, sl
 80040f2:	eb63 090b 	sbc.w	r9, r3, fp
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800410a:	ebb2 0408 	subs.w	r4, r2, r8
 800410e:	eb63 0509 	sbc.w	r5, r3, r9
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	00eb      	lsls	r3, r5, #3
 800411c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004120:	00e2      	lsls	r2, r4, #3
 8004122:	4614      	mov	r4, r2
 8004124:	461d      	mov	r5, r3
 8004126:	eb14 030a 	adds.w	r3, r4, sl
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	eb45 030b 	adc.w	r3, r5, fp
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800413e:	4629      	mov	r1, r5
 8004140:	028b      	lsls	r3, r1, #10
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004148:	4621      	mov	r1, r4
 800414a:	028a      	lsls	r2, r1, #10
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	2200      	movs	r2, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	60fa      	str	r2, [r7, #12]
 8004158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800415c:	f7fc f834 	bl	80001c8 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4613      	mov	r3, r2
 8004166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_GetSysClockFreq+0x180>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	3301      	adds	r3, #1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004182:	e002      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetSysClockFreq+0x184>)
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800418c:	4618      	mov	r0, r3
 800418e:	3740      	adds	r7, #64	; 0x40
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	017d7840 	.word	0x017d7840

080041a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000030 	.word	0x20000030

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4903      	ldr	r1, [pc, #12]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08004cf4 	.word	0x08004cf4

080041e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e041      	b.n	800427a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fc fdc8 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 fa28 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_TIM_PWM_Start+0x24>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e022      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d109      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x3e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e015      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start+0x58>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e008      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07c      	b.n	80043f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x82>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004304:	e013      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0x92>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	e00b      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004324:	e003      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fbee 	bl	8004b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_PWM_Start+0xcc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <HAL_TIM_PWM_Start+0x178>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_TIM_PWM_Start+0xd0>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_TIM_PWM_Start+0xd2>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01d      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_TIM_PWM_Start+0x17c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <HAL_TIM_PWM_Start+0x180>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_TIM_PWM_Start+0x184>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_TIM_PWM_Start+0x178>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIM_PWM_Start+0x188>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_TIM_PWM_Start+0x18c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d010      	beq.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	e007      	b.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fb76 	bl	8004b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2e      	ldr	r2, [pc, #184]	; (80044ec <HAL_TIM_PWM_Stop+0xd8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_PWM_Stop+0x2c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <HAL_TIM_PWM_Stop+0xdc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_TIM_PWM_Stop+0x30>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_TIM_PWM_Stop+0x32>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	f241 1311 	movw	r3, #4369	; 0x1111
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_TIM_PWM_Stop+0x66>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	f240 4344 	movw	r3, #1092	; 0x444
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_TIM_PWM_Stop+0x66>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	f241 1311 	movw	r3, #4369	; 0x1111
 8004484:	4013      	ands	r3, r2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <HAL_TIM_PWM_Stop+0x96>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	f240 4344 	movw	r3, #1092	; 0x444
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_TIM_PWM_Stop+0x96>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Stop+0xa6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_PWM_Stop+0xce>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Stop+0xb6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_PWM_Stop+0xce>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Stop+0xc6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_PWM_Stop+0xce>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400

080044f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800450e:	2302      	movs	r3, #2
 8004510:	e0ae      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	f200 809f 	bhi.w	8004660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	0800455d 	.word	0x0800455d
 800452c:	08004661 	.word	0x08004661
 8004530:	08004661 	.word	0x08004661
 8004534:	08004661 	.word	0x08004661
 8004538:	0800459d 	.word	0x0800459d
 800453c:	08004661 	.word	0x08004661
 8004540:	08004661 	.word	0x08004661
 8004544:	08004661 	.word	0x08004661
 8004548:	080045df 	.word	0x080045df
 800454c:	08004661 	.word	0x08004661
 8004550:	08004661 	.word	0x08004661
 8004554:	08004661 	.word	0x08004661
 8004558:	0800461f 	.word	0x0800461f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f928 	bl	80047b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0208 	orr.w	r2, r2, #8
 8004576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0204 	bic.w	r2, r2, #4
 8004586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6999      	ldr	r1, [r3, #24]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]
      break;
 800459a:	e064      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f978 	bl	8004898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	619a      	str	r2, [r3, #24]
      break;
 80045dc:	e043      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f9cd 	bl	8004984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0208 	orr.w	r2, r2, #8
 80045f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0204 	bic.w	r2, r2, #4
 8004608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69d9      	ldr	r1, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	61da      	str	r2, [r3, #28]
      break;
 800461c:	e023      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa21 	bl	8004a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69d9      	ldr	r1, [r3, #28]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	021a      	lsls	r2, r3, #8
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	61da      	str	r2, [r3, #28]
      break;
 800465e:	e002      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
      break;
 8004664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a40      	ldr	r2, [pc, #256]	; (800478c <TIM_Base_SetConfig+0x114>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <TIM_Base_SetConfig+0x118>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <TIM_Base_SetConfig+0x11c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3b      	ldr	r2, [pc, #236]	; (8004798 <TIM_Base_SetConfig+0x120>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <TIM_Base_SetConfig+0x124>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2f      	ldr	r2, [pc, #188]	; (800478c <TIM_Base_SetConfig+0x114>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d027      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <TIM_Base_SetConfig+0x118>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d023      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <TIM_Base_SetConfig+0x11c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <TIM_Base_SetConfig+0x120>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a29      	ldr	r2, [pc, #164]	; (800479c <TIM_Base_SetConfig+0x124>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d017      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a28      	ldr	r2, [pc, #160]	; (80047a0 <TIM_Base_SetConfig+0x128>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <TIM_Base_SetConfig+0x12c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00f      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a26      	ldr	r2, [pc, #152]	; (80047a8 <TIM_Base_SetConfig+0x130>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <TIM_Base_SetConfig+0x134>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <TIM_Base_SetConfig+0x138>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <TIM_Base_SetConfig+0x13c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <TIM_Base_SetConfig+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0xf8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0c      	ldr	r2, [pc, #48]	; (800479c <TIM_Base_SetConfig+0x124>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40010400 	.word	0x40010400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800
 80047ac:	40001800 	.word	0x40001800
 80047b0:	40001c00 	.word	0x40001c00
 80047b4:	40002000 	.word	0x40002000

080047b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 0302 	bic.w	r3, r3, #2
 8004800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a20      	ldr	r2, [pc, #128]	; (8004890 <TIM_OC1_SetConfig+0xd8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_OC1_SetConfig+0x64>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <TIM_OC1_SetConfig+0xdc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10c      	bne.n	8004836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0308 	bic.w	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <TIM_OC1_SetConfig+0xd8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_OC1_SetConfig+0x8e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a14      	ldr	r2, [pc, #80]	; (8004894 <TIM_OC1_SetConfig+0xdc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d111      	bne.n	800486a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	621a      	str	r2, [r3, #32]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40010000 	.word	0x40010000
 8004894:	40010400 	.word	0x40010400

08004898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0210 	bic.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0320 	bic.w	r3, r3, #32
 80048e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a22      	ldr	r2, [pc, #136]	; (800497c <TIM_OC2_SetConfig+0xe4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC2_SetConfig+0x68>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a21      	ldr	r2, [pc, #132]	; (8004980 <TIM_OC2_SetConfig+0xe8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10d      	bne.n	800491c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <TIM_OC2_SetConfig+0xe4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC2_SetConfig+0x94>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <TIM_OC2_SetConfig+0xe8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d113      	bne.n	8004954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40010400 	.word	0x40010400

08004984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <TIM_OC3_SetConfig+0xe0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_OC3_SetConfig+0x66>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <TIM_OC3_SetConfig+0xe4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10d      	bne.n	8004a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <TIM_OC3_SetConfig+0xe0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC3_SetConfig+0x92>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <TIM_OC3_SetConfig+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d113      	bne.n	8004a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	031b      	lsls	r3, r3, #12
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <TIM_OC4_SetConfig+0xa4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC4_SetConfig+0x68>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <TIM_OC4_SetConfig+0xa8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d109      	bne.n	8004ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40010400 	.word	0x40010400

08004b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e05a      	b.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d01d      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10c      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <memset>:
 8004c5c:	4402      	add	r2, r0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d100      	bne.n	8004c66 <memset+0xa>
 8004c64:	4770      	bx	lr
 8004c66:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6a:	e7f9      	b.n	8004c60 <memset+0x4>

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	; (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f000 f818 	bl	8004cb4 <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08004d70 	.word	0x08004d70
 8004ca8:	08004d70 	.word	0x08004d70
 8004cac:	08004d70 	.word	0x08004d70
 8004cb0:	08004d74 	.word	0x08004d74

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	bf00      	nop
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
